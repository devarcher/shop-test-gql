{
  "ast": null,
  "code": "import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    shop {\\n      id\\n      name\\n    }\\n    orders(first: 10, query: \\\"fulfillment_status:unshipped\\\") {\\n      edges {\\n        node {\\n          id\\n          name\\n          displayFulfillmentStatus\\n          note\\n          createdAt\\n          lineItems(first: 10) {\\n            edges {\\n              node {\\n                title\\n                quantity\\n              }\\n            }\\n          }\\n          customer {\\n            id\\n            firstName\\n            lastName\\n            email\\n            phone\\n          }\\n          customAttributes {\\n            key\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"react-apollo\";\nimport Orders from \"./Orders\";\nvar GET_ORDERS = gql(_templateObject());\n\nvar GetOrders = function GetOrders() {\n  // Apollo data\n  var _useQuery = useQuery(GET_ORDERS, {\n    pollInterval: 30000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return null;\n  if (error) return \"Error! \".concat(error);\n  console.log(\"Get Orders\", data);\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"pickup\");\n    }\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"delivery\");\n    }\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"shipping\");\n    }\n  }, \"To Ship\"))), data.orders.edges.map(function (edge) {\n    return __jsx(\"div\", {\n      key: edge.node.name,\n      data: data\n    }, getCheckoutMethod(edge) === method && __jsx(\"div\", {\n      className: \"border p-2 w-1/3 flex content-center\"\n    }, __jsx(\"div\", {\n      className: \"flex w-2/3 p-2 flex-col\"\n    }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Due Date: \", getDeliveryDates(edge)), __jsx(\"h4\", null, \"Due Time: \", getDeliveryTimes(edge))), __jsx(\"div\", null, __jsx(\"label\", {\n      \"for\": \"order-status-select\"\n    }, \"Update Status:\"), __jsx(\"select\", {\n      name: \"status\",\n      value: orderStatus,\n      onChange: function onChange(e) {\n        return handleStatus(e);\n      }\n    }, __jsx(\"option\", {\n      value: \"\"\n    }, \"--Status--\"), __jsx(\"option\", {\n      value: \"null\"\n    }, \"Cancelled\"), __jsx(\"option\", {\n      value: \"prep\"\n    }, \"In Prep\"), __jsx(\"option\", {\n      value: \"ready\"\n    }, \"Ready\"), __jsx(\"option\", {\n      value: \"notified\"\n    }, \"Customer Notified\")))));\n  }));\n};\n\nexport default GetOrders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/components/GetOrders.js"
    ],
    "names": [
      "gql",
      "useQuery",
      "Orders",
      "GET_ORDERS",
      "GetOrders",
      "pollInterval",
      "loading",
      "error",
      "data",
      "console",
      "log",
      "setMethod",
      "orders",
      "edges",
      "map",
      "edge",
      "node",
      "name",
      "getCheckoutMethod",
      "method",
      "getOrderName",
      "getFulFillmentStatus",
      "getCustomerFullName",
      "getCustomerEmail",
      "note",
      "getCustomerNote",
      "getDeliveryDates",
      "getDeliveryTimes",
      "orderStatus",
      "e",
      "handleStatus"
    ],
    "mappings": ";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,UAAU,GAAGH,GAAH,mBAAhB;;AAuCA,IAAMI,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB;AADsB,kBAEWH,QAAQ,CAACE,UAAD,EAAa;AACpDE,IAAAA,YAAY,EAAE;AADsC,GAAb,CAFnB;AAAA,MAEdC,OAFc,aAEdA,OAFc;AAAA,MAELC,KAFK,aAELA,KAFK;AAAA,MAEEC,IAFF,aAEEA,IAFF;;AAMtB,MAAIF,OAAJ,EAAa,OAAO,IAAP;AACb,MAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAEXE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;AAEA,SACE,4BACE,mBACE,2BADF,EAEE;AAAK,IAAA,SAAS,EAAE;AAAhB,KACE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMG,SAAS,CAAC,QAAD,CAAf;AAAA;AAFX,eADF,EAOE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,UAAD,CAAf;AAAA;AAFX,kBAPF,EAaE;AACE,IAAA,SAAS,EAAE,cADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,UAAD,CAAf;AAAA;AAFX,eAbF,CAFF,CADF,EAwBKH,IAAI,CAACI,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsB,UAACC,IAAD;AAAA,WACrB;AAAK,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAL,CAAUC,IAApB;AAA0B,MAAA,IAAI,EAAET;AAAhC,OACSU,iBAAiB,CAACH,IAAD,CAAjB,KAA4BI,MAA5B,IACX;AACE,MAAA,SAAS,EAAC;AADZ,OAGE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,kCAAiBC,YAAY,CAACL,IAAD,CAA7B,CADF,EAEE,8BAAaM,oBAAoB,CAACN,IAAD,CAAjC,CAFF,EAGE,8BAAaG,iBAAiB,CAACH,IAAD,CAA9B,CAHF,EAIE,qCAAoBO,mBAAmB,CAACP,IAAD,CAAvC,CAJF,EAKE,sCAAqBQ,gBAAgB,CAACR,IAAD,CAArC,CALF,EAMGA,IAAI,CAACC,IAAL,CAAUQ,IAAV,IAAkB,qCAAoBC,eAAe,CAACV,IAAD,CAAnC,CANrB,EAOE,gCAAeW,gBAAgB,CAACX,IAAD,CAA/B,CAPF,EAQE,gCAAeY,gBAAgB,CAACZ,IAAD,CAA/B,CARF,CAHF,EAaE,mBACE;AAAO,aAAI;AAAX,wBADF,EAGE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAEa,WAFT;AAGE,MAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,eAAOC,YAAY,CAACD,CAAD,CAAnB;AAAA;AAHZ,OAKE;AAAQ,MAAA,KAAK,EAAC;AAAd,oBALF,EAME;AAAQ,MAAA,KAAK,EAAC;AAAd,mBANF,EAOE;AAAQ,MAAA,KAAK,EAAC;AAAd,iBAPF,EAQE;AAAQ,MAAA,KAAK,EAAC;AAAd,eARF,EASE;AAAQ,MAAA,KAAK,EAAC;AAAd,2BATF,CAHF,CAbF,CAFE,CADqB;AAAA,GAAtB,CAxBL,CADF;AAiED,CA5ED;;AA8EA,eAAezB,SAAf",
    "sourcesContent": [
      "import gql from \"graphql-tag\";\nimport { useQuery } from \"react-apollo\";\nimport Orders from \"./Orders\";\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst GetOrders = () => {\n  // Apollo data\n  const { loading, error, data } = useQuery(GET_ORDERS, {\n    pollInterval: 30000,\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  console.log(\"Get Orders\", data)\n\n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex\"}>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n        {data.orders.edges.map((edge) => (\n          <div key={edge.node.name} data={data}>\n                  {getCheckoutMethod(edge) === method && (\n        <div\n          className=\"border p-2 w-1/3 flex content-center\"\n        >\n          <div className=\"flex w-2/3 p-2 flex-col\">\n            <h2>Order Name: {getOrderName(edge)}</h2>\n            <h4>Status: {getFulFillmentStatus(edge)}</h4>\n            <h2>Method: {getCheckoutMethod(edge)}</h2>\n            <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n            <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n            {edge.node.note && <h4>Customer Note: {getCustomerNote(edge)}</h4>}\n            <h4>Due Date: {getDeliveryDates(edge)}</h4>\n            <h4>Due Time: {getDeliveryTimes(edge)}</h4>\n          </div>\n          <div>\n            <label for=\"order-status-select\">Update Status:</label>\n\n            <select\n              name=\"status\"\n              value={orderStatus}\n              onChange={(e) => handleStatus(e)}\n            >\n              <option value=\"\">--Status--</option>\n              <option value=\"null\">Cancelled</option>\n              <option value=\"prep\">In Prep</option>\n              <option value=\"ready\">Ready</option>\n              <option value=\"notified\">Customer Notified</option>\n            </select>\n          </div>\n        </div>\n      )}\n\n\n\n          </div>\n        ))}\n    </>\n  );\n};\n\nexport default GetOrders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

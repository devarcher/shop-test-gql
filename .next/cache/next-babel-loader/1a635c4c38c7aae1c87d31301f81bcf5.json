{
  "ast": null,
  "code": "import React from \"react\";\nvar __jsx = React.createElement;\nimport react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"react-apollo\";\nimport _ from \"lodash\";\nimport { getCheckoutMethod, getDeliveryDates, getDeliveryTimes, getPickupTimes, getOrderName, getFulFillmentStatus, getCustomerFullName, getCustomerEmail, getCustomerNote, getOrderCreationTime } from \"../utils/getCustomAttributes\";\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\nconst ORDER_UPDATE = gql`\n  mutation orderUpdate($input: OrderInput!) {\n    orderUpdate(input: $input) {\n      order {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\n\nconst Orders = () => {\n  const {\n    0: method,\n    1: setMethod\n  } = useState(\"\");\n  const {\n    0: orderStatus,\n    1: setOrderStatus\n  } = useState(\"\"); // Apollo data\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ORDERS, {\n    pollInterval: 30000\n  });\n  if (loading) return null;\n  if (error) return `Error! ${error}`; // let input;\n  // const [orderUpdate, { data }] = useMutation(ORDER_UPDATE);\n  // e.preventDefault();\n  // orderUpdate({ variables: { input: input.value } });\n  // input.value = \"\";\n  // // Local State\n  // const [timeStampArray, setTimeStampArray] = useState([]);\n  // // const [orderedArray, setOrderedArray] = useState([]);\n  // useEffect(() => {\n  //   const dateTimeArray = [];\n  //   if(data !== undefined) {\n  //     data.orders.edges.map(edge => {\n  //       const deliveryDate = getDeliveryDates(edge);\n  //       const deliveryTime = getDeliveryTimes(edge);\n  //       if(deliveryTime !== undefined) {\n  //         const processTimesArray = deliveryTime.split(' ');\n  //         const deliveryWindowParse = processTimesArray.slice(0, 2)\n  //         const deliveryDueTime = deliveryWindowParse.join(' ')\n  //         dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  //       }\n  //       dateTimeArray.sort();\n  //       setTimeStampArray(dateTimeArray)\n  //     })\n  //   }\n  // }, [method])\n  // useEffect(() => {\n  //   // setOrderedArray(orderedArray => [...orderedArray, timeStampArray])\n  //   console.log(\"timestamparray\", timeStampArray)\n  // }, [timeStampArray])\n  // // console.log(\"ordered Array\", orderedArray)\n  // const updateStatus = () => {\n  //   console.log('hi')\n  // }\n\n  console.log(orderStatus);\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: () => setMethod(\"pickup\")\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: () => setMethod(\"delivery\")\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: () => setMethod(\"shipping\")\n  }, \"To Ship\"))), data !== undefined && data.orders.edges.map(edge => {\n    return getCheckoutMethod(edge) === method && __jsx(\"div\", {\n      key: edge.node.name,\n      className: \"border p-2 w-1/3 flex content-center\"\n    }, __jsx(\"div\", {\n      className: \"flex w-2/3 p-2 flex-col\"\n    }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Due Date: \", getDeliveryDates(edge)), __jsx(\"h4\", null, \"Due Time: \", getDeliveryTimes(edge))), __jsx(\"div\", null, __jsx(\"label\", {\n      for: \"order-status-select\"\n    }, \"Update Status:\"), __jsx(\"select\", {\n      name: \"status\",\n      value: orderStatus,\n      onChange: setOrderStatus(e.target.value)\n    }, __jsx(\"option\", {\n      value: \"\"\n    }, \"-Status--\"), __jsx(\"option\", {\n      value: \"null\"\n    }, \"Cancelled\"), __jsx(\"option\", {\n      value: \"prep\"\n    }, \"In Prep\"), __jsx(\"option\", {\n      value: \"ready\"\n    }, \"Ready\"), __jsx(\"option\", {\n      value: \"notified\"\n    }, \"Customer Notified\"))));\n  }));\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "useEffect",
      "gql",
      "useQuery",
      "useMutation",
      "_",
      "getCheckoutMethod",
      "getDeliveryDates",
      "getDeliveryTimes",
      "getPickupTimes",
      "getOrderName",
      "getFulFillmentStatus",
      "getCustomerFullName",
      "getCustomerEmail",
      "getCustomerNote",
      "getOrderCreationTime",
      "GET_ORDERS",
      "ORDER_UPDATE",
      "Orders",
      "method",
      "setMethod",
      "orderStatus",
      "setOrderStatus",
      "loading",
      "error",
      "data",
      "pollInterval",
      "console",
      "log",
      "undefined",
      "orders",
      "edges",
      "map",
      "edge",
      "node",
      "name",
      "note",
      "e",
      "target",
      "value"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"react-apollo\";\nimport _ from \"lodash\";\nimport {\n  getCheckoutMethod,\n  getDeliveryDates,\n  getDeliveryTimes,\n  getPickupTimes,\n  getOrderName,\n  getFulFillmentStatus,\n  getCustomerFullName,\n  getCustomerEmail,\n  getCustomerNote,\n  getOrderCreationTime,\n} from \"../utils/getCustomAttributes\";\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ORDER_UPDATE = gql`\n  mutation orderUpdate($input: OrderInput!) {\n    orderUpdate(input: $input) {\n      order {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\n\nconst Orders = () => {\n  const [method, setMethod] = useState(\"\");\n  const [orderStatus, setOrderStatus] = useState(\"\")\n\n  // Apollo data\n  const { loading, error, data } = useQuery(GET_ORDERS, {\n    pollInterval: 30000,\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  // let input;\n  // const [orderUpdate, { data }] = useMutation(ORDER_UPDATE);\n\n  // e.preventDefault();\n  // orderUpdate({ variables: { input: input.value } });\n  // input.value = \"\";\n\n  // // Local State\n  // const [timeStampArray, setTimeStampArray] = useState([]);\n  // // const [orderedArray, setOrderedArray] = useState([]);\n\n  // useEffect(() => {\n  //   const dateTimeArray = [];\n  //   if(data !== undefined) {\n  //     data.orders.edges.map(edge => {\n  //       const deliveryDate = getDeliveryDates(edge);\n  //       const deliveryTime = getDeliveryTimes(edge);\n\n  //       if(deliveryTime !== undefined) {\n  //         const processTimesArray = deliveryTime.split(' ');\n  //         const deliveryWindowParse = processTimesArray.slice(0, 2)\n  //         const deliveryDueTime = deliveryWindowParse.join(' ')\n\n  //         dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  //       }\n  //       dateTimeArray.sort();\n  //       setTimeStampArray(dateTimeArray)\n  //     })\n  //   }\n  // }, [method])\n\n  // useEffect(() => {\n  //   // setOrderedArray(orderedArray => [...orderedArray, timeStampArray])\n  //   console.log(\"timestamparray\", timeStampArray)\n  // }, [timeStampArray])\n  // // console.log(\"ordered Array\", orderedArray)\n\n  // const updateStatus = () => {\n  //   console.log('hi')\n  // }\n\n  console.log(orderStatus);\n\n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex\"}>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n\n      {data !== undefined &&\n        data.orders.edges.map((edge) => {\n          return (\n            getCheckoutMethod(edge) === method && (\n              <div\n                key={edge.node.name}\n                className=\"border p-2 w-1/3 flex content-center\"\n              >\n                <div className=\"flex w-2/3 p-2 flex-col\">\n                  <h2>Order Name: {getOrderName(edge)}</h2>\n                  <h4>Status: {getFulFillmentStatus(edge)}</h4>\n                  <h2>Method: {getCheckoutMethod(edge)}</h2>\n                  <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n                  <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n                  {edge.node.note && (\n                    <h4>Customer Note: {getCustomerNote(edge)}</h4>\n                  )}\n                  <h4>Due Date: {getDeliveryDates(edge)}</h4>\n                  <h4>Due Time: {getDeliveryTimes(edge)}</h4>\n                </div>\n                <div>\n                  <label for=\"order-status-select\">Update Status:</label>\n\n                  <select name=\"status\" value={orderStatus} onChange={setOrderStatus(e.target.value)}>\n                    <option value=\"\">-Status--</option>\n                    <option value=\"null\">Cancelled</option>\n                    <option value=\"prep\">In Prep</option>\n                    <option value=\"ready\">Ready</option>\n                    <option value=\"notified\">Customer Notified</option>\n                  </select>\n                </div>\n              </div>\n            )\n          );\n        })}\n    </>\n  );\n};\n\nexport default Orders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "import React from \"react\";\nvar __jsx = React.createElement;\nimport react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, Query } from \"react-apollo\";\nimport _ from \"lodash\";\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getCheckoutMethod = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Checkout-Method\"\n  }).get(\"value\").value();\n};\n\nconst getDeliveryDates = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Date\"\n  }).get(\"value\").value();\n};\n\nconst getPickupTimes = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Pickup-Time\"\n  }).get(\"value\").value();\n};\n\nconst getDeliveryTimes = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Time\"\n  }).get(\"value\").value();\n};\n\nconst getOrderName = edge => {\n  return edge.node.name;\n};\n\nconst getFulFillmentStatus = edge => {\n  return edge.node.displayFulfillmentStatus;\n};\n\nconst getCustomerFullName = edge => {\n  return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`;\n};\n\nconst getCustomerEmail = edge => {\n  return edge.node.customer.email;\n};\n\nconst getCustomerNote = edge => {\n  return edge.node.customer.note;\n};\n\nconst getOrderCreationTime = edge => {\n  return edge.node.createdAt;\n};\n\nconst Orders = () => {\n  const {\n    data\n  } = useQuery(GET_ORDERS);\n  const {\n    0: orderedData,\n    1: setOrderedData\n  } = useState([]);\n  const {\n    0: method,\n    1: setMethod\n  } = useState(\"\"); // const addDateTime = (qlData) => {\n  //   const dateTimeArray = [];\n  //   qlData.map(edge => {\n  //     const deliveryDate = getDeliveryDates(edge);\n  //     const deliveryTime = getDeliveryTimes(edge);\n  //     if(deliveryTime !== undefined) {\n  //       const processTimesArray = deliveryTime.split(' ');\n  //       const deliveryWindowParse = processTimesArray.slice(0, 2)\n  //       const deliveryDueTime = deliveryWindowParse.join(' ')\n  //       dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  //     }\n  //     // console.log(dateTimeArray)\n  //     setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n  //   })\n  // }\n  // console.log(\"DataArray\", dataArray)\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: () => setMethod(\"pickup\")\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: () => setMethod(\"delivery\")\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: () => setMethod(\"shipping\")\n  }, \"To Ship\"))), data !== undefined && data.orders.edges.map(edge => // Show only the data associated with the Checkout Method\n  getCheckoutMethod(edge) === method && __jsx(\"div\", {\n    key: edge.node.name,\n    className: \"border p-2\"\n  }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Time Created: \", getOrderCreationTime(edge)))), \"; }}\");\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "useEffect",
      "gql",
      "useQuery",
      "Query",
      "_",
      "GET_ORDERS",
      "getCheckoutMethod",
      "edge",
      "chain",
      "node",
      "customAttributes",
      "find",
      "key",
      "get",
      "value",
      "getDeliveryDates",
      "getPickupTimes",
      "getDeliveryTimes",
      "getOrderName",
      "name",
      "getFulFillmentStatus",
      "displayFulfillmentStatus",
      "getCustomerFullName",
      "customer",
      "firstName",
      "lastName",
      "getCustomerEmail",
      "email",
      "getCustomerNote",
      "note",
      "getOrderCreationTime",
      "createdAt",
      "Orders",
      "data",
      "orderedData",
      "setOrderedData",
      "method",
      "setMethod",
      "undefined",
      "orders",
      "edges",
      "map"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, Query } from \"react-apollo\";\nimport _ from \"lodash\";\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getCheckoutMethod = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Checkout-Method\" })\n    .get(\"value\")\n    .value();\n};\nconst getDeliveryDates = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Date\" })\n    .get(\"value\")\n    .value();\n};\nconst getPickupTimes = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Pickup-Time\" })\n    .get(\"value\")\n    .value();\n};\nconst getDeliveryTimes = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Time\" })\n    .get(\"value\")\n    .value();\n};\nconst getOrderName = (edge) => {\n  return edge.node.name;\n};\nconst getFulFillmentStatus = (edge) => {\n  return edge.node.displayFulfillmentStatus;\n};\nconst getCustomerFullName = (edge) => {\n  return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`;\n};\nconst getCustomerEmail = (edge) => {\n  return edge.node.customer.email;\n};\nconst getCustomerNote = (edge) => {\n  return edge.node.customer.note;\n};\nconst getOrderCreationTime = (edge) => {\n  return edge.node.createdAt;\n};\n\nconst Orders = () => {\n\n  const { data } = useQuery(GET_ORDERS)\n\n\n\n  const [orderedData, setOrderedData] = useState([]);\n  const [method, setMethod] = useState(\"\");\n\n  \n\n  // const addDateTime = (qlData) => {\n  //   const dateTimeArray = [];\n\n  //   qlData.map(edge => {\n  //     const deliveryDate = getDeliveryDates(edge);\n  //     const deliveryTime = getDeliveryTimes(edge);\n\n  //     if(deliveryTime !== undefined) {\n  //       const processTimesArray = deliveryTime.split(' ');\n  //       const deliveryWindowParse = processTimesArray.slice(0, 2)\n  //       const deliveryDueTime = deliveryWindowParse.join(' ')\n\n  //       dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  //     }\n  //     // console.log(dateTimeArray)\n  //     setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n  //   })\n  // }\n\n  // console.log(\"DataArray\", dataArray)\n\n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex\"}>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n        {data !== undefined && data.orders.edges.map(\n          (edge) =>\n            // Show only the data associated with the Checkout Method\n            getCheckoutMethod(edge) === method && (\n              <div key={edge.node.name} className=\"border p-2\">\n                <h2>Order Name: {getOrderName(edge)}</h2>\n                <h4>Status: {getFulFillmentStatus(edge)}</h4>\n                <h2>Method: {getCheckoutMethod(edge)}</h2>\n                <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n                <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n                {edge.node.note && (\n                  <h4>Customer Note: {getCustomerNote(edge)}</h4>\n                )}\n                <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n              </div>\n            )\n          )};\n        }}\n    </>\n  );\n};\n\nexport default Orders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

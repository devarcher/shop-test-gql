{
  "ast": null,
  "code": "import React from \"react\";\nvar __jsx = React.createElement;\nimport react, { useState } from \"react\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport _ from \"lodash\";\nimport dateFns, { set } from 'date-fns'; // Order Query options\n// Filter orders by their fulfillment status.\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nconst GET_ORDERS = gql`\n{\n \tshop {\n    id\n    name\n  }\n  orders(first: 10, query: \"fulfillment_status:unshipped\") {\n    edges {\n      node {\n        id\n        name\n        displayFulfillmentStatus\n        note\n        createdAt\n        lineItems(first: 10) {\n          edges {\n            node {\n              title\n              quantity\n            }\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        customAttributes {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n`;\n\nconst getCheckoutMethod = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Checkout-Method\"\n  }).get(\"value\").value();\n};\n\nconst getDeliveryDates = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Date\"\n  }).get(\"value\").value();\n};\n\nconst getPickupTimes = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Pickup-Time\"\n  }).get(\"value\").value();\n};\n\nconst getDeliveryTimes = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Time\"\n  }).get(\"value\").value();\n};\n\nconst getOrderName = edge => {\n  return edge.node.name;\n};\n\nconst getFulFillmentStatus = edge => {\n  return edge.node.displayFulfillmentStatus;\n};\n\nconst getCustomerFullName = edge => {\n  return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`;\n};\n\nconst getCustomerEmail = edge => {\n  return edge.node.customer.email;\n};\n\nconst getCustomerNote = edge => {\n  return edge.node.customer.note;\n};\n\nconst getOrderCreationTime = edge => {\n  return edge.node.createdAt;\n};\n\nconst Orders = () => {\n  const {\n    0: dataArray,\n    1: setDataArray\n  } = useState([]);\n  const {\n    0: orderedData,\n    1: setOrderedData\n  } = useState([]);\n  const {\n    0: method,\n    1: setMethod\n  } = useState('');\n\n  const addDateTime = qlData => {\n    const dateTimeArray = [];\n    qlData.map(edge => {\n      const deliveryDate = getDeliveryDates(edge);\n      const deliveryTime = getDeliveryTimes(edge);\n\n      if (deliveryTime !== undefined) {\n        const processTimesArray = deliveryTime.split(' ');\n        const deliveryWindowParse = processTimesArray.slice(0, 2);\n        const deliveryDueTime = deliveryWindowParse.join(' ');\n        dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString());\n      } // console.log(dateTimeArray)\n\n\n      setDataArray(qlData.concat(dateTimeArray));\n    });\n  };\n\n  console.log(\"Added Time Array\", dataArray);\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex justify-around\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: () => setMethod(\"pickup\")\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: () => setMethod(\"delivery\")\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: () => setMethod(\"shipping\")\n  }, \"To Ship\"))), __jsx(Query, {\n    query: GET_ORDERS\n  }, ({\n    data,\n    loading,\n    error\n  }) => {\n    if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n    if (error) return __jsx(\"div\", null, error.message);\n    const qlData = data.orders.edges; // setDataArray(qlData)\n\n    addDateTime(qlData);\n    return qlData.map(edge => // Show only the data associated with the Checkout Method\n    getCheckoutMethod(edge) === method && __jsx(\"div\", {\n      key: edge.node.name,\n      className: \"border p-2\"\n    }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Time Created: \", getOrderCreationTime(edge))));\n  }));\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "gql",
      "Query",
      "_",
      "dateFns",
      "set",
      "GET_ORDERS",
      "getCheckoutMethod",
      "edge",
      "chain",
      "node",
      "customAttributes",
      "find",
      "key",
      "get",
      "value",
      "getDeliveryDates",
      "getPickupTimes",
      "getDeliveryTimes",
      "getOrderName",
      "name",
      "getFulFillmentStatus",
      "displayFulfillmentStatus",
      "getCustomerFullName",
      "customer",
      "firstName",
      "lastName",
      "getCustomerEmail",
      "email",
      "getCustomerNote",
      "note",
      "getOrderCreationTime",
      "createdAt",
      "Orders",
      "dataArray",
      "setDataArray",
      "orderedData",
      "setOrderedData",
      "method",
      "setMethod",
      "addDateTime",
      "qlData",
      "dateTimeArray",
      "map",
      "deliveryDate",
      "deliveryTime",
      "undefined",
      "processTimesArray",
      "split",
      "deliveryWindowParse",
      "slice",
      "deliveryDueTime",
      "join",
      "push",
      "Date",
      "toISOString",
      "concat",
      "console",
      "log",
      "data",
      "loading",
      "error",
      "message",
      "orders",
      "edges"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, {useState} from \"react\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport _ from \"lodash\"\nimport dateFns, { set } from 'date-fns';\n\n// Order Query options\n// Filter orders by their fulfillment status.\n\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nconst GET_ORDERS = gql`\n{\n \tshop {\n    id\n    name\n  }\n  orders(first: 10, query: \"fulfillment_status:unshipped\") {\n    edges {\n      node {\n        id\n        name\n        displayFulfillmentStatus\n        note\n        createdAt\n        lineItems(first: 10) {\n          edges {\n            node {\n              title\n              quantity\n            }\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        customAttributes {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n`;\n\n  const getCheckoutMethod = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Checkout-Method\" })\n    .get(\"value\")\n    .value();\n  }\n  const getDeliveryDates = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Date\" })\n    .get(\"value\")\n    .value();\n  }\n  const getPickupTimes = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Pickup-Time\" })\n    .get(\"value\")\n    .value();\n  } \n    const getDeliveryTimes = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Time\" })\n    .get(\"value\")\n    .value();\n  } \n  const getOrderName = (edge) => {\n    return edge.node.name\n  }\n    const getFulFillmentStatus = (edge) => {\n    return edge.node.displayFulfillmentStatus\n  }\n  const getCustomerFullName = (edge) => {\n    return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`\n  }\n  const getCustomerEmail = (edge) => {\n    return edge.node.customer.email\n  }\n  const getCustomerNote = (edge) => {\n    return edge.node.customer.note\n  }\n  const getOrderCreationTime = (edge) => {\n    return edge.node.createdAt\n  }\n\n  \n  const Orders = () => {\n    const [dataArray, setDataArray] = useState([])\n    const [orderedData, setOrderedData] = useState([])\n    const [method, setMethod] = useState('')\n    \n    const addDateTime = (qlData) => {\n      const dateTimeArray = [];\n      \n      qlData.map(edge => {\n        const deliveryDate = getDeliveryDates(edge);\n        const deliveryTime = getDeliveryTimes(edge);\n        \n        if(deliveryTime !== undefined) {\n          const processTimesArray = deliveryTime.split(' ');\n          const deliveryWindowParse = processTimesArray.slice(0, 2)\n          const deliveryDueTime = deliveryWindowParse.join(' ')\n    \n          dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n        }\n        // console.log(dateTimeArray)\n        setDataArray(qlData.concat(dateTimeArray))\n      })\n    }\n\n    console.log(\"Added Time Array\", dataArray)\n\n  return (\n    <>\n    <div>\n    <h1>Orders</h1>\n    <div className={\"w-full flex justify-around\"}>\n      <button className={\"btn btn-gray\"} onClick={() => setMethod(\"pickup\")}>Pickups</button>\n      <button className={\"btn btn-gray\"} onClick={() => setMethod(\"delivery\")}>Deliveries</button>\n      <button className={\"btn btn-gray\"} onClick={() => setMethod(\"shipping\")}>To Ship</button>\n    </div>\n    </div>\n    <Query query={GET_ORDERS}>\n      {({ data, loading, error }) => {\n        if (loading) return <div>Loading…</div>;\n        if (error) return <div>{error.message}</div>;\n\n        const qlData = data.orders.edges\n        // setDataArray(qlData)\n        addDateTime(qlData);\n\n        return qlData.map((edge) => (\n          // Show only the data associated with the Checkout Method\n          getCheckoutMethod(edge) === method &&\n          <div key={edge.node.name} className=\"border p-2\">\n            <h2>Order Name: {getOrderName(edge)}</h2>\n            <h4>Status: {getFulFillmentStatus(edge)}</h4>\n            <h2>Method: {getCheckoutMethod(edge)}</h2>\n            <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n            <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n            {edge.node.note && <h4>Customer Note: {getCustomerNote(edge)}</h4>}\n            <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n          </div>\n        )) \n      }}\n    </Query>\n    </>\n  )\n}\n\nexport default Orders"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

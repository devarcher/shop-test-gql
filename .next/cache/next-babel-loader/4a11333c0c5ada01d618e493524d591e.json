{
  "ast": null,
  "code": "import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    shop {\\n      id\\n      name\\n    }\\n    orders(first: 10, query: \\\"fulfillment_status:unshipped\\\") {\\n      edges {\\n        node {\\n          id\\n          name\\n          displayFulfillmentStatus\\n          note\\n          createdAt\\n          lineItems(first: 10) {\\n            edges {\\n              node {\\n                title\\n                quantity\\n              }\\n            }\\n          }\\n          customer {\\n            id\\n            firstName\\n            lastName\\n            email\\n            phone\\n          }\\n          customAttributes {\\n            key\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, Query } from \"react-apollo\";\nimport _ from \"lodash\";\nimport { getCheckoutMethod, getDeliveryDates, getDeliveryTimes, getPickupTimes, getOrderName, getFulFillmentStatus, getCustomerFullName, getCustomerEmail, getCustomerNote, getOrderCreationTime } from \"../utils/getCustomAttributes\";\nvar GET_ORDERS = gql(_templateObject());\n\nvar Orders = function Orders() {\n  // Apollo data\n  var _useQuery = useQuery(GET_ORDERS),\n      data = _useQuery.data;\n\n  addDateTime(data);\n  console.log(\"pre-sort\", data); // Local State\n\n  var _useState = useState([]),\n      orderedData = _useState[0],\n      setOrderedData = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      method = _useState2[0],\n      setMethod = _useState2[1];\n\n  var addDateTime = function addDateTime(data) {\n    var dateTimeArray = [];\n    data.map(function (edge) {\n      var deliveryDate = getDeliveryDates(edge);\n      var deliveryTime = getDeliveryTimes(edge);\n\n      if (deliveryTime !== undefined) {\n        var processTimesArray = deliveryTime.split(' ');\n        var deliveryWindowParse = processTimesArray.slice(0, 2);\n        var deliveryDueTime = deliveryWindowParse.join(' ');\n        dateTimeArray.push(new Date(\"\".concat(deliveryDate, \" \").concat(deliveryDueTime)).toISOString());\n      } // console.log(dateTimeArray)\n\n\n      data.push(dateTimeArray);\n      data.sort(dateTimeArray);\n    });\n    console.log(\"post sort\", data);\n  }; // console.log(\"DataArray\", dataArray)\n\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"pickup\");\n    }\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"delivery\");\n    }\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"shipping\");\n    }\n  }, \"To Ship\"))), data !== undefined && data.orders.edges.map(function (edge) {\n    return (// Show only the data associated with the Checkout Method\n      getCheckoutMethod(edge) === method && __jsx(\"div\", {\n        key: edge.node.name,\n        className: \"border p-2\"\n      }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Time Created: \", getOrderCreationTime(edge)))\n    );\n  }));\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "useEffect",
      "gql",
      "useQuery",
      "Query",
      "_",
      "getCheckoutMethod",
      "getDeliveryDates",
      "getDeliveryTimes",
      "getPickupTimes",
      "getOrderName",
      "getFulFillmentStatus",
      "getCustomerFullName",
      "getCustomerEmail",
      "getCustomerNote",
      "getOrderCreationTime",
      "GET_ORDERS",
      "Orders",
      "data",
      "addDateTime",
      "console",
      "log",
      "orderedData",
      "setOrderedData",
      "method",
      "setMethod",
      "dateTimeArray",
      "map",
      "edge",
      "deliveryDate",
      "deliveryTime",
      "undefined",
      "processTimesArray",
      "split",
      "deliveryWindowParse",
      "slice",
      "deliveryDueTime",
      "join",
      "push",
      "Date",
      "toISOString",
      "sort",
      "orders",
      "edges",
      "node",
      "name",
      "note"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, Query } from \"react-apollo\";\nimport _ from \"lodash\";\nimport {\n  getCheckoutMethod,\n  getDeliveryDates,\n  getDeliveryTimes,\n  getPickupTimes,\n  getOrderName,\n  getFulFillmentStatus,\n  getCustomerFullName,\n  getCustomerEmail,\n  getCustomerNote,\n  getOrderCreationTime,\n} from \"../utils/getCustomAttributes\";\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Orders = () => {\n  // Apollo data\n  const { data } = useQuery(GET_ORDERS);\n  addDateTime(data)\n\n  console.log(\"pre-sort\", data)\n\n  // Local State\n  const [orderedData, setOrderedData] = useState([]);\n  const [method, setMethod] = useState(\"\");\n\n  const addDateTime = (data) => {\n    const dateTimeArray = [];\n\n    data.map(edge => {\n      const deliveryDate = getDeliveryDates(edge);\n      const deliveryTime = getDeliveryTimes(edge);\n\n      if(deliveryTime !== undefined) {\n        const processTimesArray = deliveryTime.split(' ');\n        const deliveryWindowParse = processTimesArray.slice(0, 2)\n        const deliveryDueTime = deliveryWindowParse.join(' ')\n\n        dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n      }\n      // console.log(dateTimeArray)\n      data.push(dateTimeArray)\n      data.sort(dateTimeArray);\n    })\n    console.log(\"post sort\", data)\n  }\n\n  // console.log(\"DataArray\", dataArray)\n\n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex\"}>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n      {data !== undefined &&\n        data.orders.edges.map(\n          (edge) =>\n            // Show only the data associated with the Checkout Method\n            getCheckoutMethod(edge) === method && (\n              <div key={edge.node.name} className=\"border p-2\">\n                <h2>Order Name: {getOrderName(edge)}</h2>\n                <h4>Status: {getFulFillmentStatus(edge)}</h4>\n                <h2>Method: {getCheckoutMethod(edge)}</h2>\n                <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n                <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n                {edge.node.note && (\n                  <h4>Customer Note: {getCustomerNote(edge)}</h4>\n                )}\n                <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n              </div>\n            )\n        )}\n    </>\n  );\n};\n\nexport default Orders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n \\tshop {\\n    id\\n    name\\n  }\\n  orders(first: 10, query: \\\"fulfillment_status:unshipped\\\") {\\n    edges {\\n      node {\\n        id\\n        name\\n        displayFulfillmentStatus\\n        note\\n        createdAt\\n        customer {\\n          id\\n          firstName\\n          lastName\\n          email\\n          phone\\n          ordersCount\\n          totalSpent\\n        }\\n        customAttributes {\\n          key\\n          value\\n        }\\n      }\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport _ from \"lodash\";\nvar GET_ORDERS = gql(_templateObject());\n\nvar Orders = function Orders() {\n  return __jsx(React.Fragment, null, __jsx(\"h1\", null, \"Unfulfilled Orders\"), __jsx(Query, {\n    query: GET_ORDERS\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        error = _ref.error;\n    if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n    if (error) return __jsx(\"div\", null, error.message); // console.log(data.orders.edges);\n\n    var dataArray = data.orders.edges;\n    console.log(dataArray);\n\n    var method = _.chain(dataArray.node).find({\n      key: \"Checkout-Method\"\n    }).get(\"value\").value();\n\n    console.log(method); // const pickupMethod = data.orders.edges[7].customAttributes\n    // console.log(pickupMethod)\n\n    return data.orders.edges.map(function (edge) {\n      return __jsx(\"div\", {\n        key: edge.node.name,\n        className: \"border p-2\"\n      }, __jsx(\"h2\", null, \"Order Name: \", edge.node.name), __jsx(\"h4\", null, \"Status: \", edge.node.displayFulfillmentStatus), __jsx(\"h3\", null, \"Customer Name: \", edge.node.customer.firstName, \" \", edge.node.customer.lastName), __jsx(\"h3\", null, \"Customer Email: \", edge.node.customer.email), edge.node.note && __jsx(\"h4\", null, \"Customer message: \", edge.node.note), __jsx(\"h4\", null, \"Time Created: \", edge.node.createdAt));\n    });\n  }));\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "gql",
      "Query",
      "_",
      "GET_ORDERS",
      "Orders",
      "data",
      "loading",
      "error",
      "message",
      "dataArray",
      "orders",
      "edges",
      "console",
      "log",
      "method",
      "chain",
      "node",
      "find",
      "key",
      "get",
      "value",
      "map",
      "edge",
      "name",
      "displayFulfillmentStatus",
      "customer",
      "firstName",
      "lastName",
      "email",
      "note",
      "createdAt"
    ],
    "mappings": ";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,IAAMC,UAAU,GAAGH,GAAH,mBAAhB;;AAiCA,IAAMI,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,SACE,4BACA,uCADA,EAEA,MAAC,KAAD;AAAO,IAAA,KAAK,EAAED;AAAd,KACG,gBAA8B;AAAA,QAA3BE,IAA2B,QAA3BA,IAA2B;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QAAZC,KAAY,QAAZA,KAAY;AAC3B,QAAID,OAAJ,EAAa,OAAO,mCAAP;AACb,QAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACC,OAAZ,CAAP,CAFgB,CAG3B;;AAEA,QAAMC,SAAS,GAAGJ,IAAI,CAACK,MAAL,CAAYC,KAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;;AAEA,QAAMK,MAAM,GAAGZ,CAAC,CAACa,KAAF,CAAQN,SAAS,CAACO,IAAlB,EACbC,IADa,CACR;AAAEC,MAAAA,GAAG,EAAE;AAAP,KADQ,EAEbC,GAFa,CAET,OAFS,EAGbC,KAHa,EAAf;;AAKCR,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ,EAb0B,CAgB3B;AAEA;;AAEA,WAAOT,IAAI,CAACK,MAAL,CAAYC,KAAZ,CAAkBU,GAAlB,CAAsB,UAACC,IAAD;AAAA,aAC7B;AAAK,QAAA,GAAG,EAAEA,IAAI,CAACN,IAAL,CAAUO,IAApB;AAA0B,QAAA,SAAS,EAAC;AAApC,SACE,kCAAiBD,IAAI,CAACN,IAAL,CAAUO,IAA3B,CADF,EAEE,8BAAaD,IAAI,CAACN,IAAL,CAAUQ,wBAAvB,CAFF,EAGE,qCAAoBF,IAAI,CAACN,IAAL,CAAUS,QAAV,CAAmBC,SAAvC,OAAmDJ,IAAI,CAACN,IAAL,CAAUS,QAAV,CAAmBE,QAAtE,CAHF,EAIE,sCAAqBL,IAAI,CAACN,IAAL,CAAUS,QAAV,CAAmBG,KAAxC,CAJF,EAKGN,IAAI,CAACN,IAAL,CAAUa,IAAV,IAAkB,wCAAuBP,IAAI,CAACN,IAAL,CAAUa,IAAjC,CALrB,EAME,oCAAmBP,IAAI,CAACN,IAAL,CAAUc,SAA7B,CANF,CAD6B;AAAA,KAAtB,CAAP;AAWH,GAhCH,CAFA,CADF;AAuCD,CAxCD;;AA0CA,eAAe1B,MAAf",
    "sourcesContent": [
      "import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport _ from \"lodash\"\n\nconst GET_ORDERS = gql`\n{\n \tshop {\n    id\n    name\n  }\n  orders(first: 10, query: \"fulfillment_status:unshipped\") {\n    edges {\n      node {\n        id\n        name\n        displayFulfillmentStatus\n        note\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n          ordersCount\n          totalSpent\n        }\n        customAttributes {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Orders = () => {\n  return (\n    <>\n    <h1>Unfulfilled Orders</h1>\n    <Query query={GET_ORDERS}>\n      {({ data, loading, error }) => {\n          if (loading) return <div>Loadingâ€¦</div>;\n          if (error) return <div>{error.message}</div>;\n          // console.log(data.orders.edges);\n\n          const dataArray = data.orders.edges\n          console.log(dataArray)\n\n          const method = _.chain(dataArray.node)\n           .find({ key: \"Checkout-Method\" })\n           .get(\"value\")\n           .value();\n\n           console.log(method)\n\n          \n          // const pickupMethod = data.orders.edges[7].customAttributes\n\n          // console.log(pickupMethod)\n\n          return data.orders.edges.map((edge) => (\n          <div key={edge.node.name} className=\"border p-2\">\n            <h2>Order Name: {edge.node.name}</h2>\n            <h4>Status: {edge.node.displayFulfillmentStatus}</h4>\n            <h3>Customer Name: {edge.node.customer.firstName} {edge.node.customer.lastName}</h3>\n            <h3>Customer Email: {edge.node.customer.email}</h3>\n            {edge.node.note && <h4>Customer message: {edge.node.note}</h4>}\n            <h4>Time Created: {edge.node.createdAt}</h4>\n          </div>\n          ))\n\n      }}\n    </Query>\n    </>\n  )\n}\n\nexport default Orders"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

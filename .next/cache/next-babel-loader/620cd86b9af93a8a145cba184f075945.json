{
  "ast": null,
  "code": "import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    shop {\\n      id\\n      name\\n    }\\n    orders(first: 10, query: \\\"fulfillment_status:unshipped\\\") {\\n      edges {\\n        node {\\n          id\\n          name\\n          displayFulfillmentStatus\\n          note\\n          createdAt\\n          lineItems(first: 10) {\\n            edges {\\n              node {\\n                title\\n                quantity\\n              }\\n            }\\n          }\\n          customer {\\n            id\\n            firstName\\n            lastName\\n            email\\n            phone\\n          }\\n          customAttributes {\\n            key\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"react-apollo\";\nimport Orders from \"./Orders\";\nvar GET_ORDERS = gql(_templateObject());\n\nvar GetOrders = function GetOrders() {\n  // Apollo data\n  var _useQuery = useQuery(GET_ORDERS, {\n    pollInterval: 30000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return null;\n  if (error) return \"Error! \".concat(error);\n  console.log(\"Get Orders\", data);\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"pickup\");\n    }\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"delivery\");\n    }\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"shipping\");\n    }\n  }, \"To Ship\"))), data.orders.edges.map(function (edge) {\n    return __jsx(Orders, {\n      key: edge.node.name,\n      data: data\n    });\n  }));\n};\n\nexport default GetOrders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/components/GetOrders.js"
    ],
    "names": [
      "gql",
      "useQuery",
      "Orders",
      "GET_ORDERS",
      "GetOrders",
      "pollInterval",
      "loading",
      "error",
      "data",
      "console",
      "log",
      "setMethod",
      "orders",
      "edges",
      "map",
      "edge",
      "node",
      "name"
    ],
    "mappings": ";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,UAAU,GAAGH,GAAH,mBAAhB;;AAuCA,IAAMI,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB;AADsB,kBAEWH,QAAQ,CAACE,UAAD,EAAa;AACpDE,IAAAA,YAAY,EAAE;AADsC,GAAb,CAFnB;AAAA,MAEdC,OAFc,aAEdA,OAFc;AAAA,MAELC,KAFK,aAELA,KAFK;AAAA,MAEEC,IAFF,aAEEA,IAFF;;AAMtB,MAAIF,OAAJ,EAAa,OAAO,IAAP;AACb,MAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAEXE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;AAEA,SACE,4BACE,mBACE,2BADF,EAEE;AAAK,IAAA,SAAS,EAAE;AAAhB,KACE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMG,SAAS,CAAC,QAAD,CAAf;AAAA;AAFX,eADF,EAOE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,UAAD,CAAf;AAAA;AAFX,kBAPF,EAaE;AACE,IAAA,SAAS,EAAE,cADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,UAAD,CAAf;AAAA;AAFX,eAbF,CAFF,CADF,EAwBGH,IAAI,CAACI,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsB,UAACC,IAAD;AAAA,WACrB,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAL,CAAUC,IAAvB;AAA6B,MAAA,IAAI,EAAET;AAAnC,MADqB;AAAA,GAAtB,CAxBH,CADF;AA8BD,CAzCD;;AA2CA,eAAeJ,SAAf",
    "sourcesContent": [
      "import gql from \"graphql-tag\";\nimport { useQuery } from \"react-apollo\";\nimport Orders from \"./Orders\";\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst GetOrders = () => {\n  // Apollo data\n  const { loading, error, data } = useQuery(GET_ORDERS, {\n    pollInterval: 30000,\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  console.log(\"Get Orders\", data);\n\n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex\"}>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n      {data.orders.edges.map((edge) => (\n        <Orders key={edge.node.name} data={data} />\n      ))}\n    </>\n  );\n};\n\nexport default GetOrders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "import react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport _ from \"lodash\"; // import dateFns, { set } from \"date-fns\";\n// Order Query options\n// Filter orders by their fulfillment status.\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getCheckoutMethod = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Checkout-Method\"\n  }).get(\"value\").value();\n};\n\nconst getDeliveryDates = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Date\"\n  }).get(\"value\").value();\n};\n\nconst getPickupTimes = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Pickup-Time\"\n  }).get(\"value\").value();\n};\n\nconst getDeliveryTimes = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Time\"\n  }).get(\"value\").value();\n};\n\nconst getOrderName = edge => {\n  return edge.node.name;\n};\n\nconst getFulFillmentStatus = edge => {\n  return edge.node.displayFulfillmentStatus;\n};\n\nconst getCustomerFullName = edge => {\n  return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`;\n};\n\nconst getCustomerEmail = edge => {\n  return edge.node.customer.email;\n};\n\nconst getCustomerNote = edge => {\n  return edge.node.customer.note;\n};\n\nconst getOrderCreationTime = edge => {\n  return edge.node.createdAt;\n};\n\nconst Orders = props => {\n  console.log(props);\n  const {\n    0: dataArray,\n    1: setDataArray\n  } = useState([]);\n  const {\n    0: orderedData,\n    1: setOrderedData\n  } = useState([]);\n  const {\n    0: method,\n    1: setMethod\n  } = useState(\"\"); // useEffect(() => {\n  //   console.log(\"effect\", dataArray);\n  // }, [dataArray]);\n  // // const addDateTime = (qlData) => {\n  // //   const dateTimeArray = [];\n  // //   qlData.map(edge => {\n  // //     const deliveryDate = getDeliveryDates(edge);\n  // //     const deliveryTime = getDeliveryTimes(edge);\n  // //     if(deliveryTime !== undefined) {\n  // //       const processTimesArray = deliveryTime.split(' ');\n  // //       const deliveryWindowParse = processTimesArray.slice(0, 2)\n  // //       const deliveryDueTime = deliveryWindowParse.join(' ')\n  // //       dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  // //     }\n  // //     // console.log(dateTimeArray)\n  // //     setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n  // //   })\n  // // }\n  // // console.log(\"DataArray\", dataArray)\n  // return (\n  //   <>\n  //     <div>\n  //       <h1>Orders</h1>\n  //       <div className={\"w-full flex justify-around\"}>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"pickup\")}\n  //         >\n  //           Pickups\n  //         </button>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"delivery\")}\n  //         >\n  //           Deliveries\n  //         </button>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"shipping\")}\n  //         >\n  //           To Ship\n  //         </button>\n  //       </div>\n  //     </div>\n  //     <Query query={GET_ORDERS}>\n  //       {({ data, loading, error }) => {\n  //         if (loading) return <div>Loadingâ€¦</div>;\n  //         if (error) return <div>{error.message}</div>;\n  //         const qlData = data.orders.edges;\n  //         setDataArray(qlData);\n  //         // addDateTime(qlData);\n  //         return qlData.map(\n  //           (edge) =>\n  //             // Show only the data associated with the Checkout Method\n  //             getCheckoutMethod(edge) === method && (\n  //               <div key={edge.node.name} className=\"border p-2\">\n  //                 <h2>Order Name: {getOrderName(edge)}</h2>\n  //                 <h4>Status: {getFulFillmentStatus(edge)}</h4>\n  //                 <h2>Method: {getCheckoutMethod(edge)}</h2>\n  //                 <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n  //                 <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n  //                 {edge.node.note && (\n  //                   <h4>Customer Note: {getCustomerNote(edge)}</h4>\n  //                 )}\n  //                 <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n  //               </div>\n  //             )\n  //         );\n  //       }}\n  //     </Query>\n  //   </>\n  // );\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "useEffect",
      "gql",
      "Query",
      "_",
      "GET_ORDERS",
      "getCheckoutMethod",
      "edge",
      "chain",
      "node",
      "customAttributes",
      "find",
      "key",
      "get",
      "value",
      "getDeliveryDates",
      "getPickupTimes",
      "getDeliveryTimes",
      "getOrderName",
      "name",
      "getFulFillmentStatus",
      "displayFulfillmentStatus",
      "getCustomerFullName",
      "customer",
      "firstName",
      "lastName",
      "getCustomerEmail",
      "email",
      "getCustomerNote",
      "note",
      "getOrderCreationTime",
      "createdAt",
      "Orders",
      "props",
      "console",
      "log",
      "dataArray",
      "setDataArray",
      "orderedData",
      "setOrderedData",
      "method",
      "setMethod"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport _ from \"lodash\";\n// import dateFns, { set } from \"date-fns\";\n\n// Order Query options\n// Filter orders by their fulfillment status.\n\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getCheckoutMethod = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Checkout-Method\" })\n    .get(\"value\")\n    .value();\n};\nconst getDeliveryDates = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Date\" })\n    .get(\"value\")\n    .value();\n};\nconst getPickupTimes = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Pickup-Time\" })\n    .get(\"value\")\n    .value();\n};\nconst getDeliveryTimes = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Time\" })\n    .get(\"value\")\n    .value();\n};\nconst getOrderName = (edge) => {\n  return edge.node.name;\n};\nconst getFulFillmentStatus = (edge) => {\n  return edge.node.displayFulfillmentStatus;\n};\nconst getCustomerFullName = (edge) => {\n  return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`;\n};\nconst getCustomerEmail = (edge) => {\n  return edge.node.customer.email;\n};\nconst getCustomerNote = (edge) => {\n  return edge.node.customer.note;\n};\nconst getOrderCreationTime = (edge) => {\n  return edge.node.createdAt;\n};\n\nconst Orders = (props) => {\n\n  console.log(props)\n\n  const [dataArray, setDataArray] = useState([]);\n  const [orderedData, setOrderedData] = useState([]);\n  const [method, setMethod] = useState(\"\");\n\n  // useEffect(() => {\n  //   console.log(\"effect\", dataArray);\n  // }, [dataArray]);\n  // // const addDateTime = (qlData) => {\n  // //   const dateTimeArray = [];\n\n  // //   qlData.map(edge => {\n  // //     const deliveryDate = getDeliveryDates(edge);\n  // //     const deliveryTime = getDeliveryTimes(edge);\n\n  // //     if(deliveryTime !== undefined) {\n  // //       const processTimesArray = deliveryTime.split(' ');\n  // //       const deliveryWindowParse = processTimesArray.slice(0, 2)\n  // //       const deliveryDueTime = deliveryWindowParse.join(' ')\n\n  // //       dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  // //     }\n  // //     // console.log(dateTimeArray)\n  // //     setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n  // //   })\n  // // }\n\n  // // console.log(\"DataArray\", dataArray)\n\n  // return (\n  //   <>\n  //     <div>\n  //       <h1>Orders</h1>\n  //       <div className={\"w-full flex justify-around\"}>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"pickup\")}\n  //         >\n  //           Pickups\n  //         </button>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"delivery\")}\n  //         >\n  //           Deliveries\n  //         </button>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"shipping\")}\n  //         >\n  //           To Ship\n  //         </button>\n  //       </div>\n  //     </div>\n  //     <Query query={GET_ORDERS}>\n  //       {({ data, loading, error }) => {\n  //         if (loading) return <div>Loadingâ€¦</div>;\n  //         if (error) return <div>{error.message}</div>;\n\n  //         const qlData = data.orders.edges;\n  //         setDataArray(qlData);\n  //         // addDateTime(qlData);\n\n  //         return qlData.map(\n  //           (edge) =>\n  //             // Show only the data associated with the Checkout Method\n  //             getCheckoutMethod(edge) === method && (\n  //               <div key={edge.node.name} className=\"border p-2\">\n  //                 <h2>Order Name: {getOrderName(edge)}</h2>\n  //                 <h4>Status: {getFulFillmentStatus(edge)}</h4>\n  //                 <h2>Method: {getCheckoutMethod(edge)}</h2>\n  //                 <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n  //                 <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n  //                 {edge.node.note && (\n  //                   <h4>Customer Note: {getCustomerNote(edge)}</h4>\n  //                 )}\n  //                 <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n  //               </div>\n  //             )\n  //         );\n  //       }}\n  //     </Query>\n  //   </>\n  // );\n};\n\nexport default Orders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

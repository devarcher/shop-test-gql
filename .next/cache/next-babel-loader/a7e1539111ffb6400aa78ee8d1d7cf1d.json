{
  "ast": null,
  "code": "import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    shop {\\n      id\\n      name\\n    }\\n    orders(first: 10, query: \\\"fulfillment_status:unshipped\\\") {\\n      edges {\\n        node {\\n          id\\n          name\\n          displayFulfillmentStatus\\n          note\\n          createdAt\\n          lineItems(first: 10) {\\n            edges {\\n              node {\\n                title\\n                quantity\\n              }\\n            }\\n          }\\n          customer {\\n            id\\n            firstName\\n            lastName\\n            email\\n            phone\\n          }\\n          customAttributes {\\n            key\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"react-apollo\";\nimport _ from \"lodash\";\nimport { getCheckoutMethod, getDeliveryDates, getDeliveryTimes, getPickupTimes, getOrderName, getFulFillmentStatus, getCustomerFullName, getCustomerEmail, getCustomerNote, getOrderCreationTime } from \"../utils/getCustomAttributes\";\nvar GET_ORDERS = gql(_templateObject());\n\nvar Orders = function Orders() {\n  var _useState = useState(\"\"),\n      method = _useState[0],\n      setMethod = _useState[1]; // Apollo data\n\n\n  var _useQuery = useQuery(GET_ORDERS, {\n    pollInterval: 30000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return null;\n  if (error) return \"Error! \".concat(error);\n  data.orders.edges.map(function (edge) {\n    return getCheckoutMethod(edge) === method && __jsx(\"div\", {\n      key: edge.node.name,\n      className: \"border p-2 w-1/3 flex content-center\"\n    }, __jsx(\"div\", {\n      className: \"flex w-2/3 p-2 flex-col\"\n    }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Due Date: \", getDeliveryDates(edge)), __jsx(\"h4\", null, \"Due Time: \", getDeliveryTimes(edge))), __jsx(\"div\", null, __jsx(\"button\", {\n      onClick: function onClick() {\n        return updateStatus();\n      },\n      className: \"btn btn-gray p-2 mt-20\"\n    }, \"Update Status\")));\n  }); // // Local State\n  // const [timeStampArray, setTimeStampArray] = useState([]);\n  // // const [orderedArray, setOrderedArray] = useState([]);\n  // useEffect(() => {\n  //   const dateTimeArray = [];\n  //   if(data !== undefined) {\n  //     data.orders.edges.map(edge => {\n  //       const deliveryDate = getDeliveryDates(edge);\n  //       const deliveryTime = getDeliveryTimes(edge);\n  //       if(deliveryTime !== undefined) {\n  //         const processTimesArray = deliveryTime.split(' ');\n  //         const deliveryWindowParse = processTimesArray.slice(0, 2)\n  //         const deliveryDueTime = deliveryWindowParse.join(' ')\n  //         dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  //       }\n  //       dateTimeArray.sort();\n  //       setTimeStampArray(dateTimeArray)\n  //     })\n  //   }\n  // }, [method])\n  // useEffect(() => {\n  //   // setOrderedArray(orderedArray => [...orderedArray, timeStampArray])\n  //   console.log(\"timestamparray\", timeStampArray)\n  // }, [timeStampArray])\n  // // console.log(\"ordered Array\", orderedArray)\n  // const updateStatus = () => {\n  //   console.log('hi')\n  // }\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"pickup\");\n    }\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"delivery\");\n    }\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"shipping\");\n    }\n  }, \"To Ship\"))));\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "useEffect",
      "gql",
      "useQuery",
      "useMutation",
      "_",
      "getCheckoutMethod",
      "getDeliveryDates",
      "getDeliveryTimes",
      "getPickupTimes",
      "getOrderName",
      "getFulFillmentStatus",
      "getCustomerFullName",
      "getCustomerEmail",
      "getCustomerNote",
      "getOrderCreationTime",
      "GET_ORDERS",
      "Orders",
      "method",
      "setMethod",
      "pollInterval",
      "loading",
      "error",
      "data",
      "orders",
      "edges",
      "map",
      "edge",
      "node",
      "name",
      "note",
      "updateStatus"
    ],
    "mappings": ";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SACEC,iBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,cAJF,EAKEC,YALF,EAMEC,oBANF,EAOEC,mBAPF,EAQEC,gBARF,EASEC,eATF,EAUEC,oBAVF,QAWO,8BAXP;AAaA,IAAMC,UAAU,GAAGd,GAAH,mBAAhB;;AAuCE,IAAMe,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,kBACSjB,QAAQ,CAAC,EAAD,CADjB;AAAA,MACZkB,MADY;AAAA,MACJC,SADI,iBAGrB;;;AAHqB,kBAIYhB,QAAQ,CAACa,UAAD,EAAa;AACpDI,IAAAA,YAAY,EAAE;AADsC,GAAb,CAJpB;AAAA,MAIbC,OAJa,aAIbA,OAJa;AAAA,MAIJC,KAJI,aAIJA,KAJI;AAAA,MAIGC,IAJH,aAIGA,IAJH;;AAQrB,MAAIF,OAAJ,EAAa,OAAO,IAAP;AACb,MAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAEXC,EAAAA,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsB,UAACC,IAAD,EAAU;AAC9B,WACErB,iBAAiB,CAACqB,IAAD,CAAjB,KAA4BT,MAA5B,IACA;AAAK,MAAA,GAAG,EAAES,IAAI,CAACC,IAAL,CAAUC,IAApB;AAA0B,MAAA,SAAS,EAAC;AAApC,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,kCAAiBnB,YAAY,CAACiB,IAAD,CAA7B,CADF,EAEE,8BAAahB,oBAAoB,CAACgB,IAAD,CAAjC,CAFF,EAGE,8BAAarB,iBAAiB,CAACqB,IAAD,CAA9B,CAHF,EAIE,qCAAoBf,mBAAmB,CAACe,IAAD,CAAvC,CAJF,EAKE,sCAAqBd,gBAAgB,CAACc,IAAD,CAArC,CALF,EAMGA,IAAI,CAACC,IAAL,CAAUE,IAAV,IACC,qCAAoBhB,eAAe,CAACa,IAAD,CAAnC,CAPJ,EASE,gCAAepB,gBAAgB,CAACoB,IAAD,CAA/B,CATF,EAUE,gCAAenB,gBAAgB,CAACmB,IAAD,CAA/B,CAVF,CADF,EAaE,mBACE;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMI,YAAY,EAAlB;AAAA,OAAjB;AAAuC,MAAA,SAAS,EAAE;AAAlD,uBADF,CAbF,CAFF;AAqBD,GAtBD,EAXqB,CAyCrB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,SACE,4BACE,mBACE,2BADF,EAEE;AAAK,IAAA,SAAS,EAAE;AAAhB,KACE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMZ,SAAS,CAAC,QAAD,CAAf;AAAA;AAFX,eADF,EAOE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,UAAD,CAAf;AAAA;AAFX,kBAPF,EAaE;AACE,IAAA,SAAS,EAAE,cADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,UAAD,CAAf;AAAA;AAFX,eAbF,CAFF,CADF,CADF;AA4BD,CAvGC;;AAyGF,eAAeF,MAAf",
    "sourcesContent": [
      "import react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"react-apollo\";\nimport _ from \"lodash\";\nimport {\n  getCheckoutMethod,\n  getDeliveryDates,\n  getDeliveryTimes,\n  getPickupTimes,\n  getOrderName,\n  getFulFillmentStatus,\n  getCustomerFullName,\n  getCustomerEmail,\n  getCustomerNote,\n  getOrderCreationTime,\n} from \"../utils/getCustomAttributes\";\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n  `;\n  \n  const Orders = () => {\n    const [method, setMethod] = useState(\"\");\n    \n  // Apollo data\n  const { loading, error, data } = useQuery(GET_ORDERS, {\n    pollInterval: 30000,\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  data.orders.edges.map((edge) => {\n    return (\n      getCheckoutMethod(edge) === method && (\n      <div key={edge.node.name} className=\"border p-2 w-1/3 flex content-center\">\n        <div className=\"flex w-2/3 p-2 flex-col\"> \n          <h2>Order Name: {getOrderName(edge)}</h2>\n          <h4>Status: {getFulFillmentStatus(edge)}</h4>\n          <h2>Method: {getCheckoutMethod(edge)}</h2>\n          <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n          <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n          {edge.node.note && (\n            <h4>Customer Note: {getCustomerNote(edge)}</h4>\n          )}\n          <h4>Due Date: {getDeliveryDates(edge)}</h4>\n          <h4>Due Time: {getDeliveryTimes(edge)}</h4>\n        </div>\n        <div>\n          <button onClick={() => updateStatus()} className={\"btn btn-gray p-2 mt-20\"}>Update Status</button>\n        </div>\n      </div>\n      )\n    )\n  })\n\n\n\n\n\n\n\n  // // Local State\n  // const [timeStampArray, setTimeStampArray] = useState([]);\n  // // const [orderedArray, setOrderedArray] = useState([]);\n  \n  // useEffect(() => {\n  //   const dateTimeArray = [];\n  //   if(data !== undefined) {\n  //     data.orders.edges.map(edge => {\n  //       const deliveryDate = getDeliveryDates(edge);\n  //       const deliveryTime = getDeliveryTimes(edge);\n        \n  //       if(deliveryTime !== undefined) {\n  //         const processTimesArray = deliveryTime.split(' ');\n  //         const deliveryWindowParse = processTimesArray.slice(0, 2)\n  //         const deliveryDueTime = deliveryWindowParse.join(' ')\n          \n  //         dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  //       }\n  //       dateTimeArray.sort();\n  //       setTimeStampArray(dateTimeArray)\n  //     })\n  //   }\n  // }, [method])\n  \n  // useEffect(() => {\n  //   // setOrderedArray(orderedArray => [...orderedArray, timeStampArray])\n  //   console.log(\"timestamparray\", timeStampArray)\n  // }, [timeStampArray])\n  // // console.log(\"ordered Array\", orderedArray)\n\n  // const updateStatus = () => {\n  //   console.log('hi')\n  // }\n  \n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex\"}>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n\n    </>\n  );\n};\n\nexport default Orders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

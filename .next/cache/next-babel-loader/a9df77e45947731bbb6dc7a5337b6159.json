{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport SelectStatus from \"./SelectStatus\"; // import _ from \"lodash\";\n\nimport { getCheckoutMethod, getDeliveryDates, getDeliveryTimes, getPickupTimes, getOrderName, getFulFillmentStatus, getCustomerFullName, getCustomerEmail, getCustomerNote, getOrderStatus } from \"../utils/getCustomAttributes\";\n\nvar Orders = function Orders(props) {\n  var data = props.data;\n  console.log(\"orders data\", data);\n\n  var _useState = useState(\"\"),\n      method = _useState[0],\n      setMethod = _useState[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"pickup\");\n    }\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: function onClick() {\n      return setMethod(\"delivery\");\n    }\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"shipping\");\n    }\n  }, \"To Ship\"))), data && data.orders.edges.map(function (edge) {\n    return __jsx(\"div\", {\n      key: edge.node.name\n    }, getCheckoutMethod(edge) === method && __jsx(\"div\", {\n      className: \"border p-2 w-2/3 flex content-center\"\n    }, __jsx(\"div\", {\n      className: \"flex w-2/3 p-2 flex-col\"\n    }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Due Date: \", getDeliveryDates(edge)), __jsx(\"h4\", null, \"Due Time: \", getDeliveryTimes(edge)), __jsx(\"h5\", null, \"Order id: \", edge.node.id), __jsx(\"h1\", null, \"Order status: \", edge.node.metafields)), __jsx(SelectStatus, {\n      id: edge.node.id\n    })));\n  }));\n};\n\nexport default Orders; // let input;\n// const [orderUpdate, { data }] = useMutation(ORDER_UPDATE);\n// e.preventDefault();\n// orderUpdate({ variables: { input: input.value } });\n// input.value = \"\";\n// // Local State\n// const [timeStampArray, setTimeStampArray] = useState([]);\n// // const [orderedArray, setOrderedArray] = useState([]);\n// useEffect(() => {\n//   const dateTimeArray = [];\n//   if(data !== undefined) {\n//     data.orders.edges.map(edge => {\n//       const deliveryDate = getDeliveryDates(edge);\n//       const deliveryTime = getDeliveryTimes(edge);\n//       if(deliveryTime !== undefined) {\n//         const processTimesArray = deliveryTime.split(' ');\n//         const deliveryWindowParse = processTimesArray.slice(0, 2)\n//         const deliveryDueTime = deliveryWindowParse.join(' ')\n//         dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n//       }\n//       dateTimeArray.sort();\n//       setTimeStampArray(dateTimeArray)\n//     })\n//   }\n// }, [method])\n// useEffect(() => {\n//   // setOrderedArray(orderedArray => [...orderedArray, timeStampArray])\n//   console.log(\"timestamparray\", timeStampArray)\n// }, [timeStampArray])\n// // console.log(\"ordered Array\", orderedArray)\n// const updateStatus = () => {\n//   console.log('hi')\n// }",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/components/Orders.js"
    ],
    "names": [
      "React",
      "useState",
      "SelectStatus",
      "getCheckoutMethod",
      "getDeliveryDates",
      "getDeliveryTimes",
      "getPickupTimes",
      "getOrderName",
      "getFulFillmentStatus",
      "getCustomerFullName",
      "getCustomerEmail",
      "getCustomerNote",
      "getOrderStatus",
      "Orders",
      "props",
      "data",
      "console",
      "log",
      "method",
      "setMethod",
      "orders",
      "edges",
      "map",
      "edge",
      "node",
      "name",
      "note",
      "id",
      "metafields"
    ],
    "mappings": ";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CACA;;AACA,SACEC,iBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,cAJF,EAKEC,YALF,EAMEC,oBANF,EAOEC,mBAPF,EAQEC,gBARF,EASEC,eATF,EAUEC,cAVF,QAWO,8BAXP;;AAaA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AAAA,MAChBC,IADgB,GACPD,KADO,CAChBC,IADgB;AAExBC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,IAA3B;;AAFwB,kBAGId,QAAQ,CAAC,EAAD,CAHZ;AAAA,MAGjBiB,MAHiB;AAAA,MAGTC,SAHS;;AAKxB,SACE,4BACE,mBACE,2BADF,EAEE;AAAK,IAAA,SAAS,EAAE;AAAhB,KACE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,QAAD,CAAf;AAAA;AAFX,eADF,EAOE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,UAAD,CAAf;AAAA;AAFX,kBAPF,EAaE;AACE,IAAA,SAAS,EAAE,cADb;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,UAAD,CAAf;AAAA;AAFX,eAbF,CAFF,CADF,EAwBGJ,IAAI,IACHA,IAAI,CAACK,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsB,UAACC,IAAD;AAAA,WACpB;AAAK,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAL,CAAUC;AAApB,OACGtB,iBAAiB,CAACoB,IAAD,CAAjB,KAA4BL,MAA5B,IACC;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,kCAAiBX,YAAY,CAACgB,IAAD,CAA7B,CADF,EAEE,8BAAaf,oBAAoB,CAACe,IAAD,CAAjC,CAFF,EAGE,8BAAapB,iBAAiB,CAACoB,IAAD,CAA9B,CAHF,EAIE,qCAAoBd,mBAAmB,CAACc,IAAD,CAAvC,CAJF,EAKE,sCAAqBb,gBAAgB,CAACa,IAAD,CAArC,CALF,EAMGA,IAAI,CAACC,IAAL,CAAUE,IAAV,IACC,qCAAoBf,eAAe,CAACY,IAAD,CAAnC,CAPJ,EASE,gCAAenB,gBAAgB,CAACmB,IAAD,CAA/B,CATF,EAUE,gCAAelB,gBAAgB,CAACkB,IAAD,CAA/B,CAVF,EAWE,gCAAeA,IAAI,CAACC,IAAL,CAAUG,EAAzB,CAXF,EAYE,oCAAmBJ,IAAI,CAACC,IAAL,CAAUI,UAA7B,CAZF,CADF,EAeE,MAAC,YAAD;AAAc,MAAA,EAAE,EAAEL,IAAI,CAACC,IAAL,CAAUG;AAA5B,MAfF,CAFJ,CADoB;AAAA,GAAtB,CAzBJ,CADF;AAmDD,CAxDD;;AA0DA,eAAed,MAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA",
    "sourcesContent": [
      "import React, { useState } from \"react\";\nimport SelectStatus from \"./SelectStatus\";\n// import _ from \"lodash\";\nimport {\n  getCheckoutMethod,\n  getDeliveryDates,\n  getDeliveryTimes,\n  getPickupTimes,\n  getOrderName,\n  getFulFillmentStatus,\n  getCustomerFullName,\n  getCustomerEmail,\n  getCustomerNote,\n  getOrderStatus,\n} from \"../utils/getCustomAttributes\";\n\nconst Orders = (props) => {\n  const { data } = props;\n  console.log(\"orders data\", data);\n  const [method, setMethod] = useState(\"\");\n\n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex\"}>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n      {data &&\n        data.orders.edges.map((edge) => (\n          <div key={edge.node.name}>\n            {getCheckoutMethod(edge) === method && (\n              <div className=\"border p-2 w-2/3 flex content-center\">\n                <div className=\"flex w-2/3 p-2 flex-col\">\n                  <h2>Order Name: {getOrderName(edge)}</h2>\n                  <h4>Status: {getFulFillmentStatus(edge)}</h4>\n                  <h2>Method: {getCheckoutMethod(edge)}</h2>\n                  <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n                  <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n                  {edge.node.note && (\n                    <h4>Customer Note: {getCustomerNote(edge)}</h4>\n                  )}\n                  <h4>Due Date: {getDeliveryDates(edge)}</h4>\n                  <h4>Due Time: {getDeliveryTimes(edge)}</h4>\n                  <h5>Order id: {edge.node.id}</h5>\n                  <h1>Order status: {edge.node.metafields}</h1>\n                </div>\n                <SelectStatus id={edge.node.id} />\n              </div>\n            )}\n          </div>\n        ))}\n    </>\n  );\n};\n\nexport default Orders;\n\n// let input;\n// const [orderUpdate, { data }] = useMutation(ORDER_UPDATE);\n\n// e.preventDefault();\n// orderUpdate({ variables: { input: input.value } });\n// input.value = \"\";\n\n// // Local State\n// const [timeStampArray, setTimeStampArray] = useState([]);\n// // const [orderedArray, setOrderedArray] = useState([]);\n\n// useEffect(() => {\n//   const dateTimeArray = [];\n//   if(data !== undefined) {\n//     data.orders.edges.map(edge => {\n//       const deliveryDate = getDeliveryDates(edge);\n//       const deliveryTime = getDeliveryTimes(edge);\n\n//       if(deliveryTime !== undefined) {\n//         const processTimesArray = deliveryTime.split(' ');\n//         const deliveryWindowParse = processTimesArray.slice(0, 2)\n//         const deliveryDueTime = deliveryWindowParse.join(' ')\n\n//         dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n//       }\n//       dateTimeArray.sort();\n//       setTimeStampArray(dateTimeArray)\n//     })\n//   }\n// }, [method])\n\n// useEffect(() => {\n//   // setOrderedArray(orderedArray => [...orderedArray, timeStampArray])\n//   console.log(\"timestamparray\", timeStampArray)\n// }, [timeStampArray])\n// // console.log(\"ordered Array\", orderedArray)\n\n// const updateStatus = () => {\n//   console.log('hi')\n// }\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n \\tshop {\\n    id\\n    name\\n  }\\n  orders(first: 10, query: \\\"fulfillment_status:unshipped\\\") {\\n    edges {\\n      node {\\n        id\\n        name\\n        displayFulfillmentStatus\\n        note\\n        createdAt\\n        lineItems(first: 10) {\\n          edges {\\n            node {\\n              title\\n              quantity\\n            }\\n          }\\n        }\\n        customer {\\n          id\\n          firstName\\n          lastName\\n          email\\n          phone\\n        }\\n        customAttributes {\\n          key\\n          value\\n        }\\n      }\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport react, { useState } from \"react\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport _ from \"lodash\";\nimport dateFns, { set } from 'date-fns'; // Order Query options\n// Filter orders by their fulfillment status.\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nvar GET_ORDERS = gql(_templateObject());\n\nvar getCheckoutMethod = function getCheckoutMethod(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Checkout-Method\"\n  }).get(\"value\").value();\n};\n\nvar getDeliveryDates = function getDeliveryDates(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Date\"\n  }).get(\"value\").value();\n};\n\nvar getPickupTimes = function getPickupTimes(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Pickup-Time\"\n  }).get(\"value\").value();\n};\n\nvar getDeliveryTimes = function getDeliveryTimes(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Time\"\n  }).get(\"value\").value();\n};\n\nvar getOrderName = function getOrderName(edge) {\n  return edge.node.name;\n};\n\nvar getFulFillmentStatus = function getFulFillmentStatus(edge) {\n  return edge.node.displayFulfillmentStatus;\n};\n\nvar getCustomerFullName = function getCustomerFullName(edge) {\n  return \"\".concat(edge.node.customer.firstName, \" \").concat(edge.node.customer.lastName);\n};\n\nvar getCustomerEmail = function getCustomerEmail(edge) {\n  return edge.node.customer.email;\n};\n\nvar getCustomerNote = function getCustomerNote(edge) {\n  return edge.node.customer.note;\n};\n\nvar getOrderCreationTime = function getOrderCreationTime(edge) {\n  return edge.node.createdAt;\n};\n\nvar Orders = function Orders() {\n  var _useState = useState([]),\n      dataArray = _useState[0],\n      setDataArray = _useState[1];\n\n  var _useState2 = useState([]),\n      orderedData = _useState2[0],\n      setOrderedData = _useState2[1];\n\n  var _useState3 = useState(''),\n      method = _useState3[0],\n      setMethod = _useState3[1]; // const addDateTime = (qlData) => {\n  //   const dateTimeArray = [];\n  //   qlData.map(edge => {\n  //     const deliveryDate = getDeliveryDates(edge);\n  //     const deliveryTime = getDeliveryTimes(edge);\n  //     if(deliveryTime !== undefined) {\n  //       const processTimesArray = deliveryTime.split(' ');\n  //       const deliveryWindowParse = processTimesArray.slice(0, 2)\n  //       const deliveryDueTime = deliveryWindowParse.join(' ')\n  //       dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  //     }\n  //     // console.log(dateTimeArray)\n  //     setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n  //   })\n  // }\n\n\n  console.log(\"DataArray\", dataArray);\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex justify-around\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"pickup\");\n    }\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"delivery\");\n    }\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"shipping\");\n    }\n  }, \"To Ship\"))), __jsx(Query, {\n    query: GET_ORDERS\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        error = _ref.error;\n    if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n    if (error) return __jsx(\"div\", null, error.message);\n    var qlData = data.orders.edges;\n    setDataArray(qlData); // addDateTime(qlData);\n\n    return qlData.map(function (edge) {\n      return (// Show only the data associated with the Checkout Method\n        getCheckoutMethod(edge) === method && __jsx(\"div\", {\n          key: edge.node.name,\n          className: \"border p-2\"\n        }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Time Created: \", getOrderCreationTime(edge)))\n      );\n    });\n  }));\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "gql",
      "Query",
      "_",
      "dateFns",
      "set",
      "GET_ORDERS",
      "getCheckoutMethod",
      "edge",
      "chain",
      "node",
      "customAttributes",
      "find",
      "key",
      "get",
      "value",
      "getDeliveryDates",
      "getPickupTimes",
      "getDeliveryTimes",
      "getOrderName",
      "name",
      "getFulFillmentStatus",
      "displayFulfillmentStatus",
      "getCustomerFullName",
      "customer",
      "firstName",
      "lastName",
      "getCustomerEmail",
      "email",
      "getCustomerNote",
      "note",
      "getOrderCreationTime",
      "createdAt",
      "Orders",
      "dataArray",
      "setDataArray",
      "orderedData",
      "setOrderedData",
      "method",
      "setMethod",
      "console",
      "log",
      "data",
      "loading",
      "error",
      "message",
      "qlData",
      "orders",
      "edges",
      "map"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, {useState} from \"react\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport _ from \"lodash\"\nimport dateFns, { set } from 'date-fns';\n\n// Order Query options\n// Filter orders by their fulfillment status.\n\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nconst GET_ORDERS = gql`\n{\n \tshop {\n    id\n    name\n  }\n  orders(first: 10, query: \"fulfillment_status:unshipped\") {\n    edges {\n      node {\n        id\n        name\n        displayFulfillmentStatus\n        note\n        createdAt\n        lineItems(first: 10) {\n          edges {\n            node {\n              title\n              quantity\n            }\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        customAttributes {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n`;\n\n  const getCheckoutMethod = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Checkout-Method\" })\n    .get(\"value\")\n    .value();\n  }\n  const getDeliveryDates = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Date\" })\n    .get(\"value\")\n    .value();\n  }\n  const getPickupTimes = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Pickup-Time\" })\n    .get(\"value\")\n    .value();\n  } \n    const getDeliveryTimes = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Time\" })\n    .get(\"value\")\n    .value();\n  } \n  const getOrderName = (edge) => {\n    return edge.node.name\n  }\n    const getFulFillmentStatus = (edge) => {\n    return edge.node.displayFulfillmentStatus\n  }\n  const getCustomerFullName = (edge) => {\n    return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`\n  }\n  const getCustomerEmail = (edge) => {\n    return edge.node.customer.email\n  }\n  const getCustomerNote = (edge) => {\n    return edge.node.customer.note\n  }\n  const getOrderCreationTime = (edge) => {\n    return edge.node.createdAt\n  }\n\n  \n  const Orders = () => {\n    const [dataArray, setDataArray] = useState([])\n    const [orderedData, setOrderedData] = useState([])\n    const [method, setMethod] = useState('')\n    \n    // const addDateTime = (qlData) => {\n    //   const dateTimeArray = [];\n      \n    //   qlData.map(edge => {\n    //     const deliveryDate = getDeliveryDates(edge);\n    //     const deliveryTime = getDeliveryTimes(edge);\n        \n    //     if(deliveryTime !== undefined) {\n    //       const processTimesArray = deliveryTime.split(' ');\n    //       const deliveryWindowParse = processTimesArray.slice(0, 2)\n    //       const deliveryDueTime = deliveryWindowParse.join(' ')\n    \n    //       dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n    //     }\n    //     // console.log(dateTimeArray)\n    //     setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n    //   })\n    // }\n\n    console.log(\"DataArray\", dataArray)\n\n  return (\n    <>\n    <div>\n    <h1>Orders</h1>\n    <div className={\"w-full flex justify-around\"}>\n      <button className={\"btn btn-gray\"} onClick={() => setMethod(\"pickup\")}>Pickups</button>\n      <button className={\"btn btn-gray\"} onClick={() => setMethod(\"delivery\")}>Deliveries</button>\n      <button className={\"btn btn-gray\"} onClick={() => setMethod(\"shipping\")}>To Ship</button>\n    </div>\n    </div>\n    <Query query={GET_ORDERS}>\n      {({ data, loading, error }) => {\n        if (loading) return <div>Loading…</div>;\n        if (error) return <div>{error.message}</div>;\n\n        const qlData = data.orders.edges\n        setDataArray(qlData)\n        // addDateTime(qlData);\n\n        return qlData.map((edge) => (\n          // Show only the data associated with the Checkout Method\n          getCheckoutMethod(edge) === method &&\n          <div key={edge.node.name} className=\"border p-2\">\n            <h2>Order Name: {getOrderName(edge)}</h2>\n            <h4>Status: {getFulFillmentStatus(edge)}</h4>\n            <h2>Method: {getCheckoutMethod(edge)}</h2>\n            <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n            <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n            {edge.node.note && <h4>Customer Note: {getCustomerNote(edge)}</h4>}\n            <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n          </div>\n        )) \n      }}\n    </Query>\n    </>\n  )\n}\n\nexport default Orders"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    shop {\\n      id\\n      name\\n    }\\n    orders(first: 10, query: \\\"fulfillment_status:unshipped\\\") {\\n      edges {\\n        node {\\n          id\\n          name\\n          displayFulfillmentStatus\\n          note\\n          createdAt\\n          lineItems(first: 10) {\\n            edges {\\n              node {\\n                title\\n                quantity\\n              }\\n            }\\n          }\\n          customer {\\n            id\\n            firstName\\n            lastName\\n            email\\n            phone\\n          }\\n          customAttributes {\\n            key\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport _ from \"lodash\"; // import dateFns, { set } from \"date-fns\";\n// Order Query options\n// Filter orders by their fulfillment status.\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nvar GET_ORDERS = gql(_templateObject());\n\nvar getCheckoutMethod = function getCheckoutMethod(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Checkout-Method\"\n  }).get(\"value\").value();\n};\n\nvar getDeliveryDates = function getDeliveryDates(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Date\"\n  }).get(\"value\").value();\n};\n\nvar getPickupTimes = function getPickupTimes(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Pickup-Time\"\n  }).get(\"value\").value();\n};\n\nvar getDeliveryTimes = function getDeliveryTimes(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Time\"\n  }).get(\"value\").value();\n};\n\nvar getOrderName = function getOrderName(edge) {\n  return edge.node.name;\n};\n\nvar getFulFillmentStatus = function getFulFillmentStatus(edge) {\n  return edge.node.displayFulfillmentStatus;\n};\n\nvar getCustomerFullName = function getCustomerFullName(edge) {\n  return \"\".concat(edge.node.customer.firstName, \" \").concat(edge.node.customer.lastName);\n};\n\nvar getCustomerEmail = function getCustomerEmail(edge) {\n  return edge.node.customer.email;\n};\n\nvar getCustomerNote = function getCustomerNote(edge) {\n  return edge.node.customer.note;\n};\n\nvar getOrderCreationTime = function getOrderCreationTime(edge) {\n  return edge.node.createdAt;\n};\n\nvar Orders = function Orders(props) {\n  console.log(props); // const [dataArray, setDataArray] = useState([]);\n  // const [orderedData, setOrderedData] = useState([]);\n  // const [method, setMethod] = useState(\"\");\n  // useEffect(() => {\n  //   console.log(\"effect\", dataArray);\n  // }, [dataArray]);\n  // // const addDateTime = (qlData) => {\n  // //   const dateTimeArray = [];\n  // //   qlData.map(edge => {\n  // //     const deliveryDate = getDeliveryDates(edge);\n  // //     const deliveryTime = getDeliveryTimes(edge);\n  // //     if(deliveryTime !== undefined) {\n  // //       const processTimesArray = deliveryTime.split(' ');\n  // //       const deliveryWindowParse = processTimesArray.slice(0, 2)\n  // //       const deliveryDueTime = deliveryWindowParse.join(' ')\n  // //       dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  // //     }\n  // //     // console.log(dateTimeArray)\n  // //     setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n  // //   })\n  // // }\n  // // console.log(\"DataArray\", dataArray)\n\n  return __jsx(\"div\", null, \"hi\") //   <>\n  //     <div>\n  //       <h1>Orders</h1>\n  //       <div className={\"w-full flex justify-around\"}>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"pickup\")}\n  //         >\n  //           Pickups\n  //         </button>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"delivery\")}\n  //         >\n  //           Deliveries\n  //         </button>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"shipping\")}\n  //         >\n  //           To Ship\n  //         </button>\n  //       </div>\n  //     </div>\n  //     <Query query={GET_ORDERS}>\n  //       {({ data, loading, error }) => {\n  //         if (loading) return <div>Loadingâ€¦</div>;\n  //         if (error) return <div>{error.message}</div>;\n  //         const qlData = data.orders.edges;\n  //         setDataArray(qlData);\n  //         // addDateTime(qlData);\n  //         return qlData.map(\n  //           (edge) =>\n  //             // Show only the data associated with the Checkout Method\n  //             getCheckoutMethod(edge) === method && (\n  //               <div key={edge.node.name} className=\"border p-2\">\n  //                 <h2>Order Name: {getOrderName(edge)}</h2>\n  //                 <h4>Status: {getFulFillmentStatus(edge)}</h4>\n  //                 <h2>Method: {getCheckoutMethod(edge)}</h2>\n  //                 <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n  //                 <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n  //                 {edge.node.note && (\n  //                   <h4>Customer Note: {getCustomerNote(edge)}</h4>\n  //                 )}\n  //                 <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n  //               </div>\n  //             )\n  //         );\n  //       }}\n  //     </Query>\n  //   </>\n  ;\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "useEffect",
      "gql",
      "Query",
      "_",
      "GET_ORDERS",
      "getCheckoutMethod",
      "edge",
      "chain",
      "node",
      "customAttributes",
      "find",
      "key",
      "get",
      "value",
      "getDeliveryDates",
      "getPickupTimes",
      "getDeliveryTimes",
      "getOrderName",
      "name",
      "getFulFillmentStatus",
      "displayFulfillmentStatus",
      "getCustomerFullName",
      "customer",
      "firstName",
      "lastName",
      "getCustomerEmail",
      "email",
      "getCustomerNote",
      "note",
      "getOrderCreationTime",
      "createdAt",
      "Orders",
      "props",
      "console",
      "log"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport _ from \"lodash\";\n// import dateFns, { set } from \"date-fns\";\n\n// Order Query options\n// Filter orders by their fulfillment status.\n\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getCheckoutMethod = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Checkout-Method\" })\n    .get(\"value\")\n    .value();\n};\nconst getDeliveryDates = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Date\" })\n    .get(\"value\")\n    .value();\n};\nconst getPickupTimes = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Pickup-Time\" })\n    .get(\"value\")\n    .value();\n};\nconst getDeliveryTimes = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Time\" })\n    .get(\"value\")\n    .value();\n};\nconst getOrderName = (edge) => {\n  return edge.node.name;\n};\nconst getFulFillmentStatus = (edge) => {\n  return edge.node.displayFulfillmentStatus;\n};\nconst getCustomerFullName = (edge) => {\n  return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`;\n};\nconst getCustomerEmail = (edge) => {\n  return edge.node.customer.email;\n};\nconst getCustomerNote = (edge) => {\n  return edge.node.customer.note;\n};\nconst getOrderCreationTime = (edge) => {\n  return edge.node.createdAt;\n};\n\nconst Orders = (props) => {\n\n  console.log(props)\n\n  // const [dataArray, setDataArray] = useState([]);\n  // const [orderedData, setOrderedData] = useState([]);\n  // const [method, setMethod] = useState(\"\");\n\n  // useEffect(() => {\n  //   console.log(\"effect\", dataArray);\n  // }, [dataArray]);\n  // // const addDateTime = (qlData) => {\n  // //   const dateTimeArray = [];\n\n  // //   qlData.map(edge => {\n  // //     const deliveryDate = getDeliveryDates(edge);\n  // //     const deliveryTime = getDeliveryTimes(edge);\n\n  // //     if(deliveryTime !== undefined) {\n  // //       const processTimesArray = deliveryTime.split(' ');\n  // //       const deliveryWindowParse = processTimesArray.slice(0, 2)\n  // //       const deliveryDueTime = deliveryWindowParse.join(' ')\n\n  // //       dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n  // //     }\n  // //     // console.log(dateTimeArray)\n  // //     setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n  // //   })\n  // // }\n\n  // // console.log(\"DataArray\", dataArray)\n\n  return (\n    <div>hi</div>\n  //   <>\n  //     <div>\n  //       <h1>Orders</h1>\n  //       <div className={\"w-full flex justify-around\"}>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"pickup\")}\n  //         >\n  //           Pickups\n  //         </button>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"delivery\")}\n  //         >\n  //           Deliveries\n  //         </button>\n  //         <button\n  //           className={\"btn btn-gray\"}\n  //           onClick={() => setMethod(\"shipping\")}\n  //         >\n  //           To Ship\n  //         </button>\n  //       </div>\n  //     </div>\n  //     <Query query={GET_ORDERS}>\n  //       {({ data, loading, error }) => {\n  //         if (loading) return <div>Loadingâ€¦</div>;\n  //         if (error) return <div>{error.message}</div>;\n\n  //         const qlData = data.orders.edges;\n  //         setDataArray(qlData);\n  //         // addDateTime(qlData);\n\n  //         return qlData.map(\n  //           (edge) =>\n  //             // Show only the data associated with the Checkout Method\n  //             getCheckoutMethod(edge) === method && (\n  //               <div key={edge.node.name} className=\"border p-2\">\n  //                 <h2>Order Name: {getOrderName(edge)}</h2>\n  //                 <h4>Status: {getFulFillmentStatus(edge)}</h4>\n  //                 <h2>Method: {getCheckoutMethod(edge)}</h2>\n  //                 <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n  //                 <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n  //                 {edge.node.note && (\n  //                   <h4>Customer Note: {getCustomerNote(edge)}</h4>\n  //                 )}\n  //                 <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n  //               </div>\n  //             )\n  //         );\n  //       }}\n  //     </Query>\n  //   </>\n  );\n};\n\nexport default Orders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

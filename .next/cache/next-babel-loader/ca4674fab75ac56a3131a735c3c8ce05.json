{
  "ast": null,
  "code": "import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    shop {\\n      id\\n      name\\n    }\\n    orders(first: 10, query: \\\"fulfillment_status:unshipped\\\") {\\n      edges {\\n        node {\\n          id\\n          name\\n          displayFulfillmentStatus\\n          note\\n          createdAt\\n          lineItems(first: 10) {\\n            edges {\\n              node {\\n                title\\n                quantity\\n              }\\n            }\\n          }\\n          customer {\\n            id\\n            firstName\\n            lastName\\n            email\\n            phone\\n          }\\n          customAttributes {\\n            key\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport _ from \"lodash\";\nvar GET_ORDERS = gql(_templateObject());\n\nvar getCheckoutMethod = function getCheckoutMethod(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Checkout-Method\"\n  }).get(\"value\").value();\n};\n\nvar getDeliveryDates = function getDeliveryDates(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Date\"\n  }).get(\"value\").value();\n};\n\nvar getPickupTimes = function getPickupTimes(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Pickup-Time\"\n  }).get(\"value\").value();\n};\n\nvar getDeliveryTimes = function getDeliveryTimes(edge) {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Delivery-Time\"\n  }).get(\"value\").value();\n};\n\nvar getOrderName = function getOrderName(edge) {\n  return edge.node.name;\n};\n\nvar getFulFillmentStatus = function getFulFillmentStatus(edge) {\n  return edge.node.displayFulfillmentStatus;\n};\n\nvar getCustomerFullName = function getCustomerFullName(edge) {\n  return \"\".concat(edge.node.customer.firstName, \" \").concat(edge.node.customer.lastName);\n};\n\nvar getCustomerEmail = function getCustomerEmail(edge) {\n  return edge.node.customer.email;\n};\n\nvar getCustomerNote = function getCustomerNote(edge) {\n  return edge.node.customer.note;\n};\n\nvar getOrderCreationTime = function getOrderCreationTime(edge) {\n  return edge.node.createdAt;\n};\n\nvar Orders = function Orders() {\n  var _useState = useState([]),\n      dataArray = _useState[0],\n      setDataArray = _useState[1];\n\n  var _useState2 = useState([]),\n      orderedData = _useState2[0],\n      setOrderedData = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      method = _useState3[0],\n      setMethod = _useState3[1];\n\n  var addDateTime = function addDateTime(qlData) {\n    var dateTimeArray = [];\n    qlData.map(function (edge) {\n      var deliveryDate = getDeliveryDates(edge);\n      var deliveryTime = getDeliveryTimes(edge);\n\n      if (deliveryTime !== undefined) {\n        var processTimesArray = deliveryTime.split(' ');\n        var deliveryWindowParse = processTimesArray.slice(0, 2);\n        var deliveryDueTime = deliveryWindowParse.join(' ');\n        dateTimeArray.push(new Date(\"\".concat(deliveryDate, \" \").concat(deliveryDueTime)).toISOString());\n      } // console.log(dateTimeArray)\n\n\n      setDataArray.apply(void 0, _toConsumableArray(dataArray).concat([[dataArray, qlData.concat(dateTimeArray)]]));\n    });\n  };\n\n  console.log(\"DataArray\", dataArray);\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex justify-around\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"pickup\");\n    }\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"delivery\");\n    }\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: function onClick() {\n      return setMethod(\"shipping\");\n    }\n  }, \"To Ship\"))), __jsx(Query, {\n    query: GET_ORDERS\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        error = _ref.error;\n    if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n    if (error) return __jsx(\"div\", null, error.message);\n    var qlData = data.orders.edges;\n    setDataArray(qlData); // addDateTime(qlData);\n\n    return qlData.map(function (edge) {\n      return (// Show only the data associated with the Checkout Method\n        getCheckoutMethod(edge) === method && __jsx(\"div\", {\n          key: edge.node.name,\n          className: \"border p-2\"\n        }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Time Created: \", getOrderCreationTime(edge)))\n      );\n    });\n  }));\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "useEffect",
      "gql",
      "Query",
      "_",
      "GET_ORDERS",
      "getCheckoutMethod",
      "edge",
      "chain",
      "node",
      "customAttributes",
      "find",
      "key",
      "get",
      "value",
      "getDeliveryDates",
      "getPickupTimes",
      "getDeliveryTimes",
      "getOrderName",
      "name",
      "getFulFillmentStatus",
      "displayFulfillmentStatus",
      "getCustomerFullName",
      "customer",
      "firstName",
      "lastName",
      "getCustomerEmail",
      "email",
      "getCustomerNote",
      "note",
      "getOrderCreationTime",
      "createdAt",
      "Orders",
      "dataArray",
      "setDataArray",
      "orderedData",
      "setOrderedData",
      "method",
      "setMethod",
      "addDateTime",
      "qlData",
      "dateTimeArray",
      "map",
      "deliveryDate",
      "deliveryTime",
      "undefined",
      "processTimesArray",
      "split",
      "deliveryWindowParse",
      "slice",
      "deliveryDueTime",
      "join",
      "push",
      "Date",
      "toISOString",
      "concat",
      "console",
      "log",
      "data",
      "loading",
      "error",
      "message",
      "orders",
      "edges"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, { useState, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport _ from \"lodash\";\n\nconst GET_ORDERS = gql`\n  {\n    shop {\n      id\n      name\n    }\n    orders(first: 10, query: \"fulfillment_status:unshipped\") {\n      edges {\n        node {\n          id\n          name\n          displayFulfillmentStatus\n          note\n          createdAt\n          lineItems(first: 10) {\n            edges {\n              node {\n                title\n                quantity\n              }\n            }\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n            phone\n          }\n          customAttributes {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getCheckoutMethod = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Checkout-Method\" })\n    .get(\"value\")\n    .value();\n};\nconst getDeliveryDates = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Date\" })\n    .get(\"value\")\n    .value();\n};\nconst getPickupTimes = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Pickup-Time\" })\n    .get(\"value\")\n    .value();\n};\nconst getDeliveryTimes = (edge) => {\n  return _.chain(edge.node.customAttributes)\n    .find({ key: \"Delivery-Time\" })\n    .get(\"value\")\n    .value();\n};\nconst getOrderName = (edge) => {\n  return edge.node.name;\n};\nconst getFulFillmentStatus = (edge) => {\n  return edge.node.displayFulfillmentStatus;\n};\nconst getCustomerFullName = (edge) => {\n  return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`;\n};\nconst getCustomerEmail = (edge) => {\n  return edge.node.customer.email;\n};\nconst getCustomerNote = (edge) => {\n  return edge.node.customer.note;\n};\nconst getOrderCreationTime = (edge) => {\n  return edge.node.createdAt;\n};\n\nconst Orders = () => {\n\n  const [dataArray, setDataArray] = useState([]);\n  const [orderedData, setOrderedData] = useState([]);\n  const [method, setMethod] = useState(\"\");\n\n  const addDateTime = (qlData) => {\n    const dateTimeArray = [];\n\n    qlData.map(edge => {\n      const deliveryDate = getDeliveryDates(edge);\n      const deliveryTime = getDeliveryTimes(edge);\n\n      if(deliveryTime !== undefined) {\n        const processTimesArray = deliveryTime.split(' ');\n        const deliveryWindowParse = processTimesArray.slice(0, 2)\n        const deliveryDueTime = deliveryWindowParse.join(' ')\n\n        dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n      }\n      // console.log(dateTimeArray)\n      setDataArray(...dataArray, [dataArray, qlData.concat(dateTimeArray)])\n    })\n  }\n\n  console.log(\"DataArray\", dataArray)\n\n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex justify-around\"}>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n      <Query query={GET_ORDERS}>\n        {({ data, loading, error }) => {\n          if (loading) return <div>Loading…</div>;\n          if (error) return <div>{error.message}</div>;\n\n          const qlData = data.orders.edges;\n          setDataArray(qlData);\n          // addDateTime(qlData);\n\n          return qlData.map(\n            (edge) =>\n              // Show only the data associated with the Checkout Method\n              getCheckoutMethod(edge) === method && (\n                <div key={edge.node.name} className=\"border p-2\">\n                  <h2>Order Name: {getOrderName(edge)}</h2>\n                  <h4>Status: {getFulFillmentStatus(edge)}</h4>\n                  <h2>Method: {getCheckoutMethod(edge)}</h2>\n                  <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n                  <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n                  {edge.node.note && (\n                    <h4>Customer Note: {getCustomerNote(edge)}</h4>\n                  )}\n                  <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n                </div>\n              )\n          );\n        }}\n      </Query>\n    </>\n  );\n};\n\nexport default Orders;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

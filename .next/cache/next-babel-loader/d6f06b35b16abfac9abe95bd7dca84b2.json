{
  "ast": null,
  "code": "import React from \"react\";\nvar __jsx = React.createElement;\nimport react, { useState } from \"react\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport _ from \"lodash\"; // Order Query options\n// Filter orders by their fulfillment status.\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nconst GET_ORDERS = gql`\n{\n \tshop {\n    id\n    name\n  }\n  orders(first: 10, query: \"fulfillment_status:unshipped\") {\n    edges {\n      node {\n        id\n        name\n        displayFulfillmentStatus\n        note\n        createdAt\n        lineItems(first: 10) {\n          edges {\n            node {\n              title\n              quantity\n            }\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        customAttributes {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n`;\n\nconst getCheckoutMethod = edge => {\n  return _.chain(edge.node.customAttributes).find({\n    key: \"Checkout-Method\"\n  }).get(\"value\").value();\n};\n\nconst getOrderName = edge => {\n  return edge.node.name;\n};\n\nconst getFulFillmentStatus = edge => {\n  return edge.node.displayFulfillmentStatus;\n};\n\nconst getCustomerFullName = edge => {\n  return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`;\n};\n\nconst getCustomerEmail = edge => {\n  return edge.node.customer.email;\n};\n\nconst getCustomerNote = edge => {\n  return edge.node.customer.note;\n};\n\nconst getOrderCreationTime = edge => {\n  return edge.node.createdAt;\n};\n\nconst Orders = () => {\n  const {\n    0: method,\n    1: setMethod\n  } = useState('');\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", null, __jsx(\"button\", {\n    className: \"btn font-bold py-2 px-4 rounded\",\n    onClick: () => setMethod(\"pickup\")\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn font-bold py-2 px-4 rounded\",\n    onClick: () => setMethod(\"delivery\")\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn font-bold py-2 px-4 rounded\",\n    onClick: () => setMethod(\"shipping\")\n  }, \"To Ship\"))), __jsx(Query, {\n    query: GET_ORDERS\n  }, ({\n    data,\n    loading,\n    error\n  }) => {\n    if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n    if (error) return __jsx(\"div\", null, error.message);\n    const dataArray = data.orders.edges;\n    return dataArray.map(edge => getCheckoutMethod(edge) === method && __jsx(React.Fragment, null, __jsx(\"div\", {\n      key: edge.node.name,\n      className: \"border p-2\"\n    }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Time Created: \", getOrderCreationTime(edge)))));\n  }));\n};\n\nexport default Orders;",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/pages/orders.js"
    ],
    "names": [
      "react",
      "useState",
      "gql",
      "Query",
      "_",
      "GET_ORDERS",
      "getCheckoutMethod",
      "edge",
      "chain",
      "node",
      "customAttributes",
      "find",
      "key",
      "get",
      "value",
      "getOrderName",
      "name",
      "getFulFillmentStatus",
      "displayFulfillmentStatus",
      "getCustomerFullName",
      "customer",
      "firstName",
      "lastName",
      "getCustomerEmail",
      "email",
      "getCustomerNote",
      "note",
      "getOrderCreationTime",
      "createdAt",
      "Orders",
      "method",
      "setMethod",
      "data",
      "loading",
      "error",
      "message",
      "dataArray",
      "orders",
      "edges",
      "map"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import react, {useState} from \"react\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport _ from \"lodash\"\n\n// Order Query options\n// Filter orders by their fulfillment status.\n\n// (default: any)\n// shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.\n// partial: Show partially shipped orders.\n// unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.\n// any: Show orders of any fulfillment status.\n// unfulfilled: Returns orders with fulfillment_status of null or partial.\n\n// Make shipped and unshipped\n// Open vs Closed Tickets\n\nconst GET_ORDERS = gql`\n{\n \tshop {\n    id\n    name\n  }\n  orders(first: 10, query: \"fulfillment_status:unshipped\") {\n    edges {\n      node {\n        id\n        name\n        displayFulfillmentStatus\n        note\n        createdAt\n        lineItems(first: 10) {\n          edges {\n            node {\n              title\n              quantity\n            }\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        customAttributes {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n`;\n\n  const getCheckoutMethod = (edge) => {\n    return _.chain(edge.node.customAttributes)\n    .find({ key: \"Checkout-Method\" })\n    .get(\"value\")\n    .value();\n  } \n  const getOrderName = (edge) => {\n    return edge.node.name\n  }\n    const getFulFillmentStatus = (edge) => {\n    return edge.node.displayFulfillmentStatus\n  }\n  const getCustomerFullName = (edge) => {\n    return `${edge.node.customer.firstName} ${edge.node.customer.lastName}`\n  }\n  const getCustomerEmail = (edge) => {\n    return edge.node.customer.email\n  }\n  const getCustomerNote = (edge) => {\n    return edge.node.customer.note\n  }\n  const getOrderCreationTime = (edge) => {\n    return edge.node.createdAt\n  }\n  \nconst Orders = () => {\n\n  const [method, setMethod] = useState('')\n\n  return (\n    <>\n    <div>\n    <h1>Orders</h1>\n    <div>\n      <button className={\"btn font-bold py-2 px-4 rounded\"} onClick={() => setMethod(\"pickup\")}>Pickups</button>\n      <button className={\"btn font-bold py-2 px-4 rounded\"} onClick={() => setMethod(\"delivery\")}>Deliveries</button>\n      <button className={\"btn font-bold py-2 px-4 rounded\"} onClick={() => setMethod(\"shipping\")}>To Ship</button>\n    </div>\n    </div>\n    <Query query={GET_ORDERS}>\n      {({ data, loading, error }) => {\n        if (loading) return <div>Loadingâ€¦</div>;\n        if (error) return <div>{error.message}</div>;\n\n        const dataArray = data.orders.edges\n\n        return dataArray.map((edge) => (\n          getCheckoutMethod(edge) === method &&\n          <>\n          <div key={edge.node.name} className=\"border p-2\">\n            <h2>Order Name: {getOrderName(edge)}</h2>\n            <h4>Status: {getFulFillmentStatus(edge)}</h4>\n            <h2>Method: {getCheckoutMethod(edge)}</h2>\n            <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n            <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n            {edge.node.note && <h4>Customer Note: {getCustomerNote(edge)}</h4>}\n            <h4>Time Created: {getOrderCreationTime(edge)}</h4>\n          </div>\n          </>\n        )) \n      }}\n    </Query>\n    </>\n  )\n}\n\nexport default Orders"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

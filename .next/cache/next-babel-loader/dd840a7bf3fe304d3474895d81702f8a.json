{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport SelectStatus from \"./SelectStatus\"; // import _ from \"lodash\";\n\nimport { getCheckoutMethod, getDeliveryDates, getDeliveryTimes, getPickupTimes, getOrderName, getFulFillmentStatus, getCustomerFullName, getCustomerEmail, getCustomerNote, getOrderCreationTime } from \"../utils/getCustomAttributes\"; // const ORDER_UPDATE = gql`\n//   mutation orderUpdate($input: OrderInput!) {\n//     orderUpdate(input: $input) {\n//       order {\n//         id\n//       }\n//       userErrors {\n//         field\n//         message\n//       }\n//     }\n//   }\n// `;\n\nconst Orders = props => {\n  console.log(props);\n  console.log(props.data);\n  const {\n    0: method,\n    1: setMethod\n  } = useState(\"\");\n  const {\n    0: orderStatus,\n    1: setOrderStatus\n  } = useState(\"\");\n\n  const handleStatus = e => {\n    e.preventDefault();\n    setOrderStatus(e.target.value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"h1\", null, \"Orders\"), __jsx(\"div\", {\n    className: \"w-full flex\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: () => setMethod(\"pickup\")\n  }, \"Pickups\"), __jsx(\"button\", {\n    className: \"btn btn-gray mr-2\",\n    onClick: () => setMethod(\"delivery\")\n  }, \"Deliveries\"), __jsx(\"button\", {\n    className: \"btn btn-gray\",\n    onClick: () => setMethod(\"shipping\")\n  }, \"To Ship\"))), data.orders.edges.map(edge => __jsx(\"div\", {\n    key: edge.node.name\n  }, getCheckoutMethod(edge) === method && __jsx(\"div\", {\n    className: \"border p-2 w-1/3 flex content-center\"\n  }, __jsx(\"div\", {\n    className: \"flex w-2/3 p-2 flex-col\"\n  }, __jsx(\"h2\", null, \"Order Name: \", getOrderName(edge)), __jsx(\"h4\", null, \"Status: \", getFulFillmentStatus(edge)), __jsx(\"h2\", null, \"Method: \", getCheckoutMethod(edge)), __jsx(\"h3\", null, \"Customer Name: \", getCustomerFullName(edge)), __jsx(\"h3\", null, \"Customer Email: \", getCustomerEmail(edge)), edge.node.note && __jsx(\"h4\", null, \"Customer Note: \", getCustomerNote(edge)), __jsx(\"h4\", null, \"Due Date: \", getDeliveryDates(edge)), __jsx(\"h4\", null, \"Due Time: \", getDeliveryTimes(edge))), __jsx(SelectStatus, null)), \";\")));\n};\n\nexport default Orders; // let input;\n// const [orderUpdate, { data }] = useMutation(ORDER_UPDATE);\n// e.preventDefault();\n// orderUpdate({ variables: { input: input.value } });\n// input.value = \"\";\n// // Local State\n// const [timeStampArray, setTimeStampArray] = useState([]);\n// // const [orderedArray, setOrderedArray] = useState([]);\n// useEffect(() => {\n//   const dateTimeArray = [];\n//   if(data !== undefined) {\n//     data.orders.edges.map(edge => {\n//       const deliveryDate = getDeliveryDates(edge);\n//       const deliveryTime = getDeliveryTimes(edge);\n//       if(deliveryTime !== undefined) {\n//         const processTimesArray = deliveryTime.split(' ');\n//         const deliveryWindowParse = processTimesArray.slice(0, 2)\n//         const deliveryDueTime = deliveryWindowParse.join(' ')\n//         dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n//       }\n//       dateTimeArray.sort();\n//       setTimeStampArray(dateTimeArray)\n//     })\n//   }\n// }, [method])\n// useEffect(() => {\n//   // setOrderedArray(orderedArray => [...orderedArray, timeStampArray])\n//   console.log(\"timestamparray\", timeStampArray)\n// }, [timeStampArray])\n// // console.log(\"ordered Array\", orderedArray)\n// const updateStatus = () => {\n//   console.log('hi')\n// }",
  "map": {
    "version": 3,
    "sources": [
      "/home/kiro/Documents/Gemini/shopify-Test/shopify-test-setup/components/Orders.js"
    ],
    "names": [
      "React",
      "useState",
      "SelectStatus",
      "getCheckoutMethod",
      "getDeliveryDates",
      "getDeliveryTimes",
      "getPickupTimes",
      "getOrderName",
      "getFulFillmentStatus",
      "getCustomerFullName",
      "getCustomerEmail",
      "getCustomerNote",
      "getOrderCreationTime",
      "Orders",
      "props",
      "console",
      "log",
      "data",
      "method",
      "setMethod",
      "orderStatus",
      "setOrderStatus",
      "handleStatus",
      "e",
      "preventDefault",
      "target",
      "value",
      "orders",
      "edges",
      "map",
      "edge",
      "node",
      "name",
      "note"
    ],
    "mappings": ";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CACA;;AACA,SACEC,iBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,cAJF,EAKEC,YALF,EAMEC,oBANF,EAOEC,mBAPF,EAQEC,gBARF,EASEC,eATF,EAUEC,oBAVF,QAWO,8BAXP,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAlB;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACmB,WAAD;AAAA,OAAcC;AAAd,MAAgCpB,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMqB,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,cAAc,CAACE,CAAC,CAACE,MAAF,CAASC,KAAV,CAAd;AACD,GAHD;;AAKA,SACE,4BACE,mBACE,2BADF,EAEE;AAAK,IAAA,SAAS,EAAE;AAAhB,KACE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE,MAAMP,SAAS,CAAC,QAAD;AAF1B,eADF,EAOE;AACE,IAAA,SAAS,EAAE,mBADb;AAEE,IAAA,OAAO,EAAE,MAAMA,SAAS,CAAC,UAAD;AAF1B,kBAPF,EAaE;AACE,IAAA,SAAS,EAAE,cADb;AAEE,IAAA,OAAO,EAAE,MAAMA,SAAS,CAAC,UAAD;AAF1B,eAbF,CAFF,CADF,EAwBGF,IAAI,CAACU,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAuBC,IAAD,IACrB;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,IAAL,CAAUC;AAApB,KACG7B,iBAAiB,CAAC2B,IAAD,CAAjB,KAA4BZ,MAA5B,IACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,kCAAiBX,YAAY,CAACuB,IAAD,CAA7B,CADF,EAEE,8BAAatB,oBAAoB,CAACsB,IAAD,CAAjC,CAFF,EAGE,8BAAa3B,iBAAiB,CAAC2B,IAAD,CAA9B,CAHF,EAIE,qCAAoBrB,mBAAmB,CAACqB,IAAD,CAAvC,CAJF,EAKE,sCAAqBpB,gBAAgB,CAACoB,IAAD,CAArC,CALF,EAMGA,IAAI,CAACC,IAAL,CAAUE,IAAV,IACC,qCAAoBtB,eAAe,CAACmB,IAAD,CAAnC,CAPJ,EASE,gCAAe1B,gBAAgB,CAAC0B,IAAD,CAA/B,CATF,EAUE,gCAAezB,gBAAgB,CAACyB,IAAD,CAA/B,CAVF,CADF,EAaE,MAAC,YAAD,OAbF,CAFJ,MADD,CAxBH,CADF;AAiDD,CA5DD;;AA8DA,eAAejB,MAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA",
    "sourcesContent": [
      "import React, { useState } from \"react\";\nimport SelectStatus from \"./SelectStatus\";\n// import _ from \"lodash\";\nimport {\n  getCheckoutMethod,\n  getDeliveryDates,\n  getDeliveryTimes,\n  getPickupTimes,\n  getOrderName,\n  getFulFillmentStatus,\n  getCustomerFullName,\n  getCustomerEmail,\n  getCustomerNote,\n  getOrderCreationTime,\n} from \"../utils/getCustomAttributes\";\n\n// const ORDER_UPDATE = gql`\n//   mutation orderUpdate($input: OrderInput!) {\n//     orderUpdate(input: $input) {\n//       order {\n//         id\n//       }\n//       userErrors {\n//         field\n//         message\n//       }\n//     }\n//   }\n// `;\n\nconst Orders = (props) => {\n  console.log(props);\n  console.log(props.data);\n  const [method, setMethod] = useState(\"\");\n  const [orderStatus, setOrderStatus] = useState(\"\");\n\n  const handleStatus = (e) => {\n    e.preventDefault();\n    setOrderStatus(e.target.value);\n  };\n\n  return (\n    <>\n      <div>\n        <h1>Orders</h1>\n        <div className={\"w-full flex\"}>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"pickup\")}\n          >\n            Pickups\n          </button>\n          <button\n            className={\"btn btn-gray mr-2\"}\n            onClick={() => setMethod(\"delivery\")}\n          >\n            Deliveries\n          </button>\n          <button\n            className={\"btn btn-gray\"}\n            onClick={() => setMethod(\"shipping\")}\n          >\n            To Ship\n          </button>\n        </div>\n      </div>\n      {data.orders.edges.map((edge) => (\n        <div key={edge.node.name}>\n          {getCheckoutMethod(edge) === method && (\n            <div className=\"border p-2 w-1/3 flex content-center\">\n              <div className=\"flex w-2/3 p-2 flex-col\">\n                <h2>Order Name: {getOrderName(edge)}</h2>\n                <h4>Status: {getFulFillmentStatus(edge)}</h4>\n                <h2>Method: {getCheckoutMethod(edge)}</h2>\n                <h3>Customer Name: {getCustomerFullName(edge)}</h3>\n                <h3>Customer Email: {getCustomerEmail(edge)}</h3>\n                {edge.node.note && (\n                  <h4>Customer Note: {getCustomerNote(edge)}</h4>\n                )}\n                <h4>Due Date: {getDeliveryDates(edge)}</h4>\n                <h4>Due Time: {getDeliveryTimes(edge)}</h4>\n              </div>\n              <SelectStatus />\n            </div>\n          )}\n          ;\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default Orders;\n\n// let input;\n// const [orderUpdate, { data }] = useMutation(ORDER_UPDATE);\n\n// e.preventDefault();\n// orderUpdate({ variables: { input: input.value } });\n// input.value = \"\";\n\n// // Local State\n// const [timeStampArray, setTimeStampArray] = useState([]);\n// // const [orderedArray, setOrderedArray] = useState([]);\n\n// useEffect(() => {\n//   const dateTimeArray = [];\n//   if(data !== undefined) {\n//     data.orders.edges.map(edge => {\n//       const deliveryDate = getDeliveryDates(edge);\n//       const deliveryTime = getDeliveryTimes(edge);\n\n//       if(deliveryTime !== undefined) {\n//         const processTimesArray = deliveryTime.split(' ');\n//         const deliveryWindowParse = processTimesArray.slice(0, 2)\n//         const deliveryDueTime = deliveryWindowParse.join(' ')\n\n//         dateTimeArray.push(new Date(`${deliveryDate} ${deliveryDueTime}`).toISOString())\n//       }\n//       dateTimeArray.sort();\n//       setTimeStampArray(dateTimeArray)\n//     })\n//   }\n// }, [method])\n\n// useEffect(() => {\n//   // setOrderedArray(orderedArray => [...orderedArray, timeStampArray])\n//   console.log(\"timestamparray\", timeStampArray)\n// }, [timeStampArray])\n// // console.log(\"ordered Array\", orderedArray)\n\n// const updateStatus = () => {\n//   console.log('hi')\n// }\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
